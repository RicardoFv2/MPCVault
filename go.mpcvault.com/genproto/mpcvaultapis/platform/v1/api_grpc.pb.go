// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: mpcvault/platform/v1/api.proto

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlatformAPIClient is the client API for PlatformAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformAPIClient interface {
	// CreateSigningRequest creates a signing request. The signing request can be completed using the MPCVault mobile app or using the API client signer.
	CreateSigningRequest(ctx context.Context, in *CreateSigningRequestRequest, opts ...grpc.CallOption) (*CreateSigningRequestResponse, error)
	// RejectSigningRequest rejects a signing request. Once a signing request is rejected, it cannot be re-opened.
	RejectSigningRequest(ctx context.Context, in *RejectSigningRequestRequest, opts ...grpc.CallOption) (*RejectSigningRequestResponse, error)
	// GetSigningRequestDetails returns the details of a signing request.
	// It will contain the signing request status and the transaction hash if the signing request was completed.
	GetSigningRequestDetails(ctx context.Context, in *GetSigningRequestDetailsRequest, opts ...grpc.CallOption) (*GetSigningRequestDetailsResponse, error)
	// CreateBatchPayment creates a batch payment. You will need to complete the batch payment using the MPCVault web app.
	CreateBatchPayment(ctx context.Context, in *CreateBatchPaymentRequest, opts ...grpc.CallOption) (*CreateBatchPaymentResponse, error)
	// GetBatchPaymentDetails returns the details of a batch payment including the signing requests.
	GetBatchPaymentDetails(ctx context.Context, in *GetBatchPaymentDetailsRequest, opts ...grpc.CallOption) (*GetBatchPaymentDetailsResponse, error)
	// CreateWallet creates a wallet. Wallets created will be EOA wallets. You are responsible for completing a sanity tests before using the wallet.
	// While the response contains the public key, you are strongly discouraged from using it to generate the wallet address yourself. Instead, use the address returned in the response.
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	// ExecuteSigningRequests signs a signing request. The signing request can be created via the API or manually.
	ExecuteSigningRequests(ctx context.Context, in *ExecuteSigningRequestsRequest, opts ...grpc.CallOption) (*ExecuteSigningRequestsResponse, error)
}

type platformAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformAPIClient(cc grpc.ClientConnInterface) PlatformAPIClient {
	return &platformAPIClient{cc}
}

func (c *platformAPIClient) CreateSigningRequest(ctx context.Context, in *CreateSigningRequestRequest, opts ...grpc.CallOption) (*CreateSigningRequestResponse, error) {
	out := new(CreateSigningRequestResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/CreateSigningRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) RejectSigningRequest(ctx context.Context, in *RejectSigningRequestRequest, opts ...grpc.CallOption) (*RejectSigningRequestResponse, error) {
	out := new(RejectSigningRequestResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/RejectSigningRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) GetSigningRequestDetails(ctx context.Context, in *GetSigningRequestDetailsRequest, opts ...grpc.CallOption) (*GetSigningRequestDetailsResponse, error) {
	out := new(GetSigningRequestDetailsResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/GetSigningRequestDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) CreateBatchPayment(ctx context.Context, in *CreateBatchPaymentRequest, opts ...grpc.CallOption) (*CreateBatchPaymentResponse, error) {
	out := new(CreateBatchPaymentResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/CreateBatchPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) GetBatchPaymentDetails(ctx context.Context, in *GetBatchPaymentDetailsRequest, opts ...grpc.CallOption) (*GetBatchPaymentDetailsResponse, error) {
	out := new(GetBatchPaymentDetailsResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/GetBatchPaymentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIClient) ExecuteSigningRequests(ctx context.Context, in *ExecuteSigningRequestsRequest, opts ...grpc.CallOption) (*ExecuteSigningRequestsResponse, error) {
	out := new(ExecuteSigningRequestsResponse)
	err := c.cc.Invoke(ctx, "/mpcvault.platform.v1.PlatformAPI/ExecuteSigningRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformAPIServer is the server API for PlatformAPI service.
// All implementations must embed UnimplementedPlatformAPIServer
// for forward compatibility
type PlatformAPIServer interface {
	// CreateSigningRequest creates a signing request. The signing request can be completed using the MPCVault mobile app or using the API client signer.
	CreateSigningRequest(context.Context, *CreateSigningRequestRequest) (*CreateSigningRequestResponse, error)
	// RejectSigningRequest rejects a signing request. Once a signing request is rejected, it cannot be re-opened.
	RejectSigningRequest(context.Context, *RejectSigningRequestRequest) (*RejectSigningRequestResponse, error)
	// GetSigningRequestDetails returns the details of a signing request.
	// It will contain the signing request status and the transaction hash if the signing request was completed.
	GetSigningRequestDetails(context.Context, *GetSigningRequestDetailsRequest) (*GetSigningRequestDetailsResponse, error)
	// CreateBatchPayment creates a batch payment. You will need to complete the batch payment using the MPCVault web app.
	CreateBatchPayment(context.Context, *CreateBatchPaymentRequest) (*CreateBatchPaymentResponse, error)
	// GetBatchPaymentDetails returns the details of a batch payment including the signing requests.
	GetBatchPaymentDetails(context.Context, *GetBatchPaymentDetailsRequest) (*GetBatchPaymentDetailsResponse, error)
	// CreateWallet creates a wallet. Wallets created will be EOA wallets. You are responsible for completing a sanity tests before using the wallet.
	// While the response contains the public key, you are strongly discouraged from using it to generate the wallet address yourself. Instead, use the address returned in the response.
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	// ExecuteSigningRequests signs a signing request. The signing request can be created via the API or manually.
	ExecuteSigningRequests(context.Context, *ExecuteSigningRequestsRequest) (*ExecuteSigningRequestsResponse, error)
	mustEmbedUnimplementedPlatformAPIServer()
}

// UnimplementedPlatformAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformAPIServer struct {
}

func (UnimplementedPlatformAPIServer) CreateSigningRequest(context.Context, *CreateSigningRequestRequest) (*CreateSigningRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSigningRequest not implemented")
}
func (UnimplementedPlatformAPIServer) RejectSigningRequest(context.Context, *RejectSigningRequestRequest) (*RejectSigningRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSigningRequest not implemented")
}
func (UnimplementedPlatformAPIServer) GetSigningRequestDetails(context.Context, *GetSigningRequestDetailsRequest) (*GetSigningRequestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigningRequestDetails not implemented")
}
func (UnimplementedPlatformAPIServer) CreateBatchPayment(context.Context, *CreateBatchPaymentRequest) (*CreateBatchPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchPayment not implemented")
}
func (UnimplementedPlatformAPIServer) GetBatchPaymentDetails(context.Context, *GetBatchPaymentDetailsRequest) (*GetBatchPaymentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchPaymentDetails not implemented")
}
func (UnimplementedPlatformAPIServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedPlatformAPIServer) ExecuteSigningRequests(context.Context, *ExecuteSigningRequestsRequest) (*ExecuteSigningRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSigningRequests not implemented")
}
func (UnimplementedPlatformAPIServer) mustEmbedUnimplementedPlatformAPIServer() {}

// UnsafePlatformAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformAPIServer will
// result in compilation errors.
type UnsafePlatformAPIServer interface {
	mustEmbedUnimplementedPlatformAPIServer()
}

func RegisterPlatformAPIServer(s grpc.ServiceRegistrar, srv PlatformAPIServer) {
	s.RegisterService(&PlatformAPI_ServiceDesc, srv)
}

func _PlatformAPI_CreateSigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSigningRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).CreateSigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/CreateSigningRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).CreateSigningRequest(ctx, req.(*CreateSigningRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformAPI_RejectSigningRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectSigningRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).RejectSigningRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/RejectSigningRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).RejectSigningRequest(ctx, req.(*RejectSigningRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformAPI_GetSigningRequestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigningRequestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).GetSigningRequestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/GetSigningRequestDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).GetSigningRequestDetails(ctx, req.(*GetSigningRequestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformAPI_CreateBatchPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).CreateBatchPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/CreateBatchPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).CreateBatchPayment(ctx, req.(*CreateBatchPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformAPI_GetBatchPaymentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchPaymentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).GetBatchPaymentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/GetBatchPaymentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).GetBatchPaymentDetails(ctx, req.(*GetBatchPaymentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformAPI_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformAPI_ExecuteSigningRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSigningRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformAPIServer).ExecuteSigningRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mpcvault.platform.v1.PlatformAPI/ExecuteSigningRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformAPIServer).ExecuteSigningRequests(ctx, req.(*ExecuteSigningRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformAPI_ServiceDesc is the grpc.ServiceDesc for PlatformAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpcvault.platform.v1.PlatformAPI",
	HandlerType: (*PlatformAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSigningRequest",
			Handler:    _PlatformAPI_CreateSigningRequest_Handler,
		},
		{
			MethodName: "RejectSigningRequest",
			Handler:    _PlatformAPI_RejectSigningRequest_Handler,
		},
		{
			MethodName: "GetSigningRequestDetails",
			Handler:    _PlatformAPI_GetSigningRequestDetails_Handler,
		},
		{
			MethodName: "CreateBatchPayment",
			Handler:    _PlatformAPI_CreateBatchPayment_Handler,
		},
		{
			MethodName: "GetBatchPaymentDetails",
			Handler:    _PlatformAPI_GetBatchPaymentDetails_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _PlatformAPI_CreateWallet_Handler,
		},
		{
			MethodName: "ExecuteSigningRequests",
			Handler:    _PlatformAPI_ExecuteSigningRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mpcvault/platform/v1/api.proto",
}
