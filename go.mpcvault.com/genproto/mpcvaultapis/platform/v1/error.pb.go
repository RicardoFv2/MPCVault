// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: mpcvault/platform/v1/error.proto

package platform

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceErrorCode int32

const (
	// Enum unspecified.
	ServiceErrorCode_SERVICE_ERROR_CODE_UNSPECIFIED ServiceErrorCode = 0
	// Organization subscribed plan limit exceed
	ServiceErrorCode_SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_LIMIT_EXCEED ServiceErrorCode = 1
	// Organization subscribed plan expired
	ServiceErrorCode_SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_EXPIRED ServiceErrorCode = 2
	// Organization subscribed plan not support
	ServiceErrorCode_SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_NOT_SUPPORT ServiceErrorCode = 3
)

// Enum value maps for ServiceErrorCode.
var (
	ServiceErrorCode_name = map[int32]string{
		0: "SERVICE_ERROR_CODE_UNSPECIFIED",
		1: "SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_LIMIT_EXCEED",
		2: "SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_EXPIRED",
		3: "SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_NOT_SUPPORT",
	}
	ServiceErrorCode_value = map[string]int32{
		"SERVICE_ERROR_CODE_UNSPECIFIED":                      0,
		"SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_LIMIT_EXCEED": 1,
		"SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_EXPIRED":      2,
		"SERVICE_ERROR_CODE_ORG_SUBSCRIBED_PLAN_NOT_SUPPORT":  3,
	}
)

func (x ServiceErrorCode) Enum() *ServiceErrorCode {
	p := new(ServiceErrorCode)
	*p = x
	return p
}

func (x ServiceErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_error_proto_enumTypes[0].Descriptor()
}

func (ServiceErrorCode) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_error_proto_enumTypes[0]
}

func (x ServiceErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceErrorCode.Descriptor instead.
func (ServiceErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_error_proto_rawDescGZIP(), []int{0}
}

type ExecuteSigningRequestsErrorCode int32

const (
	// Enum unspecified.
	ExecuteSigningRequestsErrorCode_EXECUTE_SIGNING_REQUESTS_ERROR_CODE_UNSPECIFIED ExecuteSigningRequestsErrorCode = 0
	// Insufficient funds
	ExecuteSigningRequestsErrorCode_EXECUTE_SIGNING_REQUESTS_ERROR_CODE_INSUFFICIENT_FUNDS ExecuteSigningRequestsErrorCode = 1
	// Denied
	ExecuteSigningRequestsErrorCode_EXECUTE_SIGNING_REQUESTS_ERROR_CODE_ALREADY_DENIED ExecuteSigningRequestsErrorCode = 2
)

// Enum value maps for ExecuteSigningRequestsErrorCode.
var (
	ExecuteSigningRequestsErrorCode_name = map[int32]string{
		0: "EXECUTE_SIGNING_REQUESTS_ERROR_CODE_UNSPECIFIED",
		1: "EXECUTE_SIGNING_REQUESTS_ERROR_CODE_INSUFFICIENT_FUNDS",
		2: "EXECUTE_SIGNING_REQUESTS_ERROR_CODE_ALREADY_DENIED",
	}
	ExecuteSigningRequestsErrorCode_value = map[string]int32{
		"EXECUTE_SIGNING_REQUESTS_ERROR_CODE_UNSPECIFIED":        0,
		"EXECUTE_SIGNING_REQUESTS_ERROR_CODE_INSUFFICIENT_FUNDS": 1,
		"EXECUTE_SIGNING_REQUESTS_ERROR_CODE_ALREADY_DENIED":     2,
	}
)

func (x ExecuteSigningRequestsErrorCode) Enum() *ExecuteSigningRequestsErrorCode {
	p := new(ExecuteSigningRequestsErrorCode)
	*p = x
	return p
}

func (x ExecuteSigningRequestsErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteSigningRequestsErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_error_proto_enumTypes[1].Descriptor()
}

func (ExecuteSigningRequestsErrorCode) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_error_proto_enumTypes[1]
}

func (x ExecuteSigningRequestsErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteSigningRequestsErrorCode.Descriptor instead.
func (ExecuteSigningRequestsErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_error_proto_rawDescGZIP(), []int{1}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are assignable to ErrorCode:
	//
	//	*Error_ServiceErrorCode
	//	*Error_ExecuteSigningRequestsErrorCode
	ErrorCode isError_ErrorCode `protobuf_oneof:"ErrorCode"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_error_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_error_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_error_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (m *Error) GetErrorCode() isError_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return nil
}

func (x *Error) GetServiceErrorCode() ServiceErrorCode {
	if x, ok := x.GetErrorCode().(*Error_ServiceErrorCode); ok {
		return x.ServiceErrorCode
	}
	return ServiceErrorCode_SERVICE_ERROR_CODE_UNSPECIFIED
}

func (x *Error) GetExecuteSigningRequestsErrorCode() ExecuteSigningRequestsErrorCode {
	if x, ok := x.GetErrorCode().(*Error_ExecuteSigningRequestsErrorCode); ok {
		return x.ExecuteSigningRequestsErrorCode
	}
	return ExecuteSigningRequestsErrorCode_EXECUTE_SIGNING_REQUESTS_ERROR_CODE_UNSPECIFIED
}

type isError_ErrorCode interface {
	isError_ErrorCode()
}

type Error_ServiceErrorCode struct {
	ServiceErrorCode ServiceErrorCode `protobuf:"varint,2,opt,name=service_error_code,json=serviceErrorCode,proto3,enum=mpcvault.platform.v1.ServiceErrorCode,oneof"`
}

type Error_ExecuteSigningRequestsErrorCode struct {
	ExecuteSigningRequestsErrorCode ExecuteSigningRequestsErrorCode `protobuf:"varint,3,opt,name=execute_signing_requests_error_code,json=executeSigningRequestsErrorCode,proto3,enum=mpcvault.platform.v1.ExecuteSigningRequestsErrorCode,oneof"`
}

func (*Error_ServiceErrorCode) isError_ErrorCode() {}

func (*Error_ExecuteSigningRequestsErrorCode) isError_ErrorCode() {}

var File_mpcvault_platform_v1_error_proto protoreflect.FileDescriptor

var file_mpcvault_platform_v1_error_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x8e, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0xdb, 0x01, 0x0a, 0x10, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x36, 0x0a, 0x32, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x2a, 0xca, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x2f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x3a, 0x0a, 0x36, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x6b, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x70, 0x63, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x42, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x6f, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpcvault_platform_v1_error_proto_rawDescOnce sync.Once
	file_mpcvault_platform_v1_error_proto_rawDescData = file_mpcvault_platform_v1_error_proto_rawDesc
)

func file_mpcvault_platform_v1_error_proto_rawDescGZIP() []byte {
	file_mpcvault_platform_v1_error_proto_rawDescOnce.Do(func() {
		file_mpcvault_platform_v1_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpcvault_platform_v1_error_proto_rawDescData)
	})
	return file_mpcvault_platform_v1_error_proto_rawDescData
}

var file_mpcvault_platform_v1_error_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mpcvault_platform_v1_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mpcvault_platform_v1_error_proto_goTypes = []interface{}{
	(ServiceErrorCode)(0),                // 0: mpcvault.platform.v1.ServiceErrorCode
	(ExecuteSigningRequestsErrorCode)(0), // 1: mpcvault.platform.v1.ExecuteSigningRequestsErrorCode
	(*Error)(nil),                        // 2: mpcvault.platform.v1.Error
}
var file_mpcvault_platform_v1_error_proto_depIdxs = []int32{
	0, // 0: mpcvault.platform.v1.Error.service_error_code:type_name -> mpcvault.platform.v1.ServiceErrorCode
	1, // 1: mpcvault.platform.v1.Error.execute_signing_requests_error_code:type_name -> mpcvault.platform.v1.ExecuteSigningRequestsErrorCode
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mpcvault_platform_v1_error_proto_init() }
func file_mpcvault_platform_v1_error_proto_init() {
	if File_mpcvault_platform_v1_error_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mpcvault_platform_v1_error_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mpcvault_platform_v1_error_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Error_ServiceErrorCode)(nil),
		(*Error_ExecuteSigningRequestsErrorCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpcvault_platform_v1_error_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpcvault_platform_v1_error_proto_goTypes,
		DependencyIndexes: file_mpcvault_platform_v1_error_proto_depIdxs,
		EnumInfos:         file_mpcvault_platform_v1_error_proto_enumTypes,
		MessageInfos:      file_mpcvault_platform_v1_error_proto_msgTypes,
	}.Build()
	File_mpcvault_platform_v1_error_proto = out.File
	file_mpcvault_platform_v1_error_proto_rawDesc = nil
	file_mpcvault_platform_v1_error_proto_goTypes = nil
	file_mpcvault_platform_v1_error_proto_depIdxs = nil
}
