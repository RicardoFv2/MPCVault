// Copyright 2023 MPCVault (MetaLoop INC)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: mpcvault/platform/v1/api.proto

package platform

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkType int32

const (
	NetworkType_NETWORK_TYPE_UNKNOWN NetworkType = 0
	NetworkType_NETWORK_TYPE_EVM     NetworkType = 1
	NetworkType_NETWORK_TYPE_BITCOIN NetworkType = 2
	NetworkType_NETWORK_TYPE_TRON    NetworkType = 3
	NetworkType_NETWORK_TYPE_APTOS   NetworkType = 4
	NetworkType_NETWORK_TYPE_SUI     NetworkType = 5
	NetworkType_NETWORK_TYPE_SOLANA  NetworkType = 6
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "NETWORK_TYPE_UNKNOWN",
		1: "NETWORK_TYPE_EVM",
		2: "NETWORK_TYPE_BITCOIN",
		3: "NETWORK_TYPE_TRON",
		4: "NETWORK_TYPE_APTOS",
		5: "NETWORK_TYPE_SUI",
		6: "NETWORK_TYPE_SOLANA",
	}
	NetworkType_value = map[string]int32{
		"NETWORK_TYPE_UNKNOWN": 0,
		"NETWORK_TYPE_EVM":     1,
		"NETWORK_TYPE_BITCOIN": 2,
		"NETWORK_TYPE_TRON":    3,
		"NETWORK_TYPE_APTOS":   4,
		"NETWORK_TYPE_SUI":     5,
		"NETWORK_TYPE_SOLANA":  6,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[0].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[0]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{0}
}

type KeyType int32

const (
	KeyType_KEY_TYPE_UNSPECIFIED   KeyType = 0
	KeyType_KEY_TYPE_ECC_SECP256K1 KeyType = 1
	KeyType_KEY_TYPE_ECC_ED25519   KeyType = 2
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "KEY_TYPE_ECC_SECP256K1",
		2: "KEY_TYPE_ECC_ED25519",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED":   0,
		"KEY_TYPE_ECC_SECP256K1": 1,
		"KEY_TYPE_ECC_ED25519":   2,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[1].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[1]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{1}
}

type ECDSAHashFunction int32

const (
	ECDSAHashFunction_ECDSA_HASH_FUNCTION_UNSPECIFIED          ECDSAHashFunction = 0
	ECDSAHashFunction_ECDSA_HASH_FUNCTION_USE_MESSAGE_DIRECTLY ECDSAHashFunction = 1
	ECDSAHashFunction_ECDSA_HASH_FUNCTION_SHA256               ECDSAHashFunction = 2
)

// Enum value maps for ECDSAHashFunction.
var (
	ECDSAHashFunction_name = map[int32]string{
		0: "ECDSA_HASH_FUNCTION_UNSPECIFIED",
		1: "ECDSA_HASH_FUNCTION_USE_MESSAGE_DIRECTLY",
		2: "ECDSA_HASH_FUNCTION_SHA256",
	}
	ECDSAHashFunction_value = map[string]int32{
		"ECDSA_HASH_FUNCTION_UNSPECIFIED":          0,
		"ECDSA_HASH_FUNCTION_USE_MESSAGE_DIRECTLY": 1,
		"ECDSA_HASH_FUNCTION_SHA256":               2,
	}
)

func (x ECDSAHashFunction) Enum() *ECDSAHashFunction {
	p := new(ECDSAHashFunction)
	*p = x
	return p
}

func (x ECDSAHashFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECDSAHashFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[2].Descriptor()
}

func (ECDSAHashFunction) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[2]
}

func (x ECDSAHashFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECDSAHashFunction.Descriptor instead.
func (ECDSAHashFunction) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{2}
}

type EVMMessage_Type int32

const (
	EVMMessage_TYPE_UNSPECIFIED     EVMMessage_Type = 0
	EVMMessage_TYPE_PERSONAL_SIGN   EVMMessage_Type = 1
	EVMMessage_TYPE_SIGN_TYPED_DATA EVMMessage_Type = 2
)

// Enum value maps for EVMMessage_Type.
var (
	EVMMessage_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_PERSONAL_SIGN",
		2: "TYPE_SIGN_TYPED_DATA",
	}
	EVMMessage_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":     0,
		"TYPE_PERSONAL_SIGN":   1,
		"TYPE_SIGN_TYPED_DATA": 2,
	}
)

func (x EVMMessage_Type) Enum() *EVMMessage_Type {
	p := new(EVMMessage_Type)
	*p = x
	return p
}

func (x EVMMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVMMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[3].Descriptor()
}

func (EVMMessage_Type) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[3]
}

func (x EVMMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVMMessage_Type.Descriptor instead.
func (EVMMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{6, 0}
}

type AptosMessage_Type int32

const (
	AptosMessage_TYPE_UNSPECIFIED AptosMessage_Type = 0
	AptosMessage_TYPE_DEFAULT     AptosMessage_Type = 1
)

// Enum value maps for AptosMessage_Type.
var (
	AptosMessage_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DEFAULT",
	}
	AptosMessage_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DEFAULT":     1,
	}
)

func (x AptosMessage_Type) Enum() *AptosMessage_Type {
	p := new(AptosMessage_Type)
	*p = x
	return p
}

func (x AptosMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[4].Descriptor()
}

func (AptosMessage_Type) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[4]
}

func (x AptosMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosMessage_Type.Descriptor instead.
func (AptosMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{7, 0}
}

type SolanaMessage_Type int32

const (
	SolanaMessage_TYPE_UNSPECIFIED SolanaMessage_Type = 0
	SolanaMessage_TYPE_DEFAULT     SolanaMessage_Type = 1
)

// Enum value maps for SolanaMessage_Type.
var (
	SolanaMessage_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DEFAULT",
	}
	SolanaMessage_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DEFAULT":     1,
	}
)

func (x SolanaMessage_Type) Enum() *SolanaMessage_Type {
	p := new(SolanaMessage_Type)
	*p = x
	return p
}

func (x SolanaMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[5].Descriptor()
}

func (SolanaMessage_Type) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[5]
}

func (x SolanaMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaMessage_Type.Descriptor instead.
func (SolanaMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{8, 0}
}

type SigningRequest_Status int32

const (
	SigningRequest_STATUS_UNSPECIFIED SigningRequest_Status = 0
	SigningRequest_STATUS_PENDING     SigningRequest_Status = 1
	SigningRequest_STATUS_SUCCEEDED   SigningRequest_Status = 2
	SigningRequest_STATUS_FAILED      SigningRequest_Status = 3
)

// Enum value maps for SigningRequest_Status.
var (
	SigningRequest_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_SUCCEEDED",
		3: "STATUS_FAILED",
	}
	SigningRequest_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_SUCCEEDED":   2,
		"STATUS_FAILED":      3,
	}
)

func (x SigningRequest_Status) Enum() *SigningRequest_Status {
	p := new(SigningRequest_Status)
	*p = x
	return p
}

func (x SigningRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[6].Descriptor()
}

func (SigningRequest_Status) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[6]
}

func (x SigningRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningRequest_Status.Descriptor instead.
func (SigningRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{34, 0}
}

type BatchPayment_Status int32

const (
	BatchPayment_STATUS_UNSPECIFIED BatchPayment_Status = 0
	BatchPayment_STATUS_PENDING     BatchPayment_Status = 1
	BatchPayment_STATUS_SUCCEEDED   BatchPayment_Status = 2
	BatchPayment_STATUS_FAILED      BatchPayment_Status = 3
)

// Enum value maps for BatchPayment_Status.
var (
	BatchPayment_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_SUCCEEDED",
		3: "STATUS_FAILED",
	}
	BatchPayment_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_SUCCEEDED":   2,
		"STATUS_FAILED":      3,
	}
)

func (x BatchPayment_Status) Enum() *BatchPayment_Status {
	p := new(BatchPayment_Status)
	*p = x
	return p
}

func (x BatchPayment_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchPayment_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mpcvault_platform_v1_api_proto_enumTypes[7].Descriptor()
}

func (BatchPayment_Status) Type() protoreflect.EnumType {
	return &file_mpcvault_platform_v1_api_proto_enumTypes[7]
}

func (x BatchPayment_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchPayment_Status.Descriptor instead.
func (BatchPayment_Status) EnumDescriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{43, 0}
}

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vault_uuid is the UUID of the vault that the wallet will be created in.
	// You can find it in the settings page of your vault on the web.
	VaultUuid string `protobuf:"bytes,1,opt,name=vault_uuid,json=vaultUuid,proto3" json:"vault_uuid,omitempty"`
	// callback_client_signer_public_key is the public key of the api client signer.
	// It is used to identify the where we should send the callback to.
	CallbackClientSignerPublicKey string `protobuf:"bytes,2,opt,name=callback_client_signer_public_key,json=callbackClientSignerPublicKey,proto3" json:"callback_client_signer_public_key,omitempty"`
	// network_type is the type of the network.
	NetworkType NetworkType `protobuf:"varint,3,opt,name=network_type,json=networkType,proto3,enum=mpcvault.platform.v1.NetworkType" json:"network_type,omitempty"`
	// (optional) ref is the customer reference field for the wallet. It has to be unique if not empty.
	// max length is 500 characters.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWalletRequest) GetVaultUuid() string {
	if x != nil {
		return x.VaultUuid
	}
	return ""
}

func (x *CreateWalletRequest) GetCallbackClientSignerPublicKey() string {
	if x != nil {
		return x.CallbackClientSignerPublicKey
	}
	return ""
}

func (x *CreateWalletRequest) GetNetworkType() NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return NetworkType_NETWORK_TYPE_UNKNOWN
}

func (x *CreateWalletRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vault_uuid is the UUID of the vault that the wallet was created in.
	VaultUuid string `protobuf:"bytes,1,opt,name=vault_uuid,json=vaultUuid,proto3" json:"vault_uuid,omitempty"`
	// key_type is the type of the key.
	KeyType KeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=mpcvault.platform.v1.KeyType" json:"key_type,omitempty"`
	// key_path is the path of the key.
	KeyPath string `protobuf:"bytes,3,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// public_key is the public key of the key.
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// network_type is the type of the network.
	NetworkType NetworkType `protobuf:"varint,5,opt,name=network_type,json=networkType,proto3,enum=mpcvault.platform.v1.NetworkType" json:"network_type,omitempty"`
	// address is the address of the wallet in the network.
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// ref is unique identifier for the wallet as configured by the user.
	Ref string `protobuf:"bytes,7,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *Wallet) GetVaultUuid() string {
	if x != nil {
		return x.VaultUuid
	}
	return ""
}

func (x *Wallet) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *Wallet) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

func (x *Wallet) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Wallet) GetNetworkType() NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return NetworkType_NETWORK_TYPE_UNKNOWN
}

func (x *Wallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Wallet) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *Wallet `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Error   *Error  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWalletResponse) GetDetails() *Wallet {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CreateWalletResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ExecuteSigningRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid is the UUID of the signing request.
	// Currently only signing requests of API wallets are supported.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ExecuteSigningRequestsRequest) Reset() {
	*x = ExecuteSigningRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSigningRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSigningRequestsRequest) ProtoMessage() {}

func (x *ExecuteSigningRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSigningRequestsRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSigningRequestsRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuteSigningRequestsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ExecuteSigningRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// tx_hash is the hash of the signed transaction, only set if status is STATUS_SUCCEEDED.
	// This does not mean that the transaction it self is successful. It only means that the signing request has been signed.
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// signatures is the signatures of the raw message, only set if status is STATUS_SUCCEEDED.
	Signatures *SignatureContainer `protobuf:"bytes,3,opt,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *ExecuteSigningRequestsResponse) Reset() {
	*x = ExecuteSigningRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSigningRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSigningRequestsResponse) ProtoMessage() {}

func (x *ExecuteSigningRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSigningRequestsResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSigningRequestsResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteSigningRequestsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExecuteSigningRequestsResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ExecuteSigningRequestsResponse) GetSignatures() *SignatureContainer {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SignatureContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*SignatureContainer_SignResponse `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignatureContainer) Reset() {
	*x = SignatureContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureContainer) ProtoMessage() {}

func (x *SignatureContainer) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureContainer.ProtoReflect.Descriptor instead.
func (*SignatureContainer) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *SignatureContainer) GetSignatures() []*SignatureContainer_SignResponse {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type EVMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the address of the sender. It has to be in this vault.
	From    string          `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Type    EVMMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=mpcvault.platform.v1.EVMMessage_Type" json:"type,omitempty"`
	Content []byte          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EVMMessage) Reset() {
	*x = EVMMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMMessage) ProtoMessage() {}

func (x *EVMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMMessage.ProtoReflect.Descriptor instead.
func (*EVMMessage) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *EVMMessage) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EVMMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EVMMessage) GetType() EVMMessage_Type {
	if x != nil {
		return x.Type
	}
	return EVMMessage_TYPE_UNSPECIFIED
}

func (x *EVMMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type AptosMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From    string                `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Type    AptosMessage_Type     `protobuf:"varint,2,opt,name=type,proto3,enum=mpcvault.platform.v1.AptosMessage_Type" json:"type,omitempty"`
	Content *AptosMessage_Message `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *AptosMessage) Reset() {
	*x = AptosMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMessage) ProtoMessage() {}

func (x *AptosMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMessage.ProtoReflect.Descriptor instead.
func (*AptosMessage) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *AptosMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AptosMessage) GetType() AptosMessage_Type {
	if x != nil {
		return x.Type
	}
	return AptosMessage_TYPE_UNSPECIFIED
}

func (x *AptosMessage) GetContent() *AptosMessage_Message {
	if x != nil {
		return x.Content
	}
	return nil
}

type SolanaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From    string             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Type    SolanaMessage_Type `protobuf:"varint,2,opt,name=type,proto3,enum=mpcvault.platform.v1.SolanaMessage_Type" json:"type,omitempty"`
	Content []byte             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SolanaMessage) Reset() {
	*x = SolanaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMessage) ProtoMessage() {}

func (x *SolanaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMessage.ProtoReflect.Descriptor instead.
func (*SolanaMessage) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *SolanaMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SolanaMessage) GetType() SolanaMessage_Type {
	if x != nil {
		return x.Type
	}
	return SolanaMessage_TYPE_UNSPECIFIED
}

func (x *SolanaMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type RawMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the wallet address of the key pair that we uses to sign the message. The wallet has to be in this vault.
	// We will use the key's algorithm to sign the message.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// content is the raw message content in bytes.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// ecdsa_hash_function is the hash function to use for signing the message. Required if the key is ECDSA.
	// This field will be ignored if the key is not ECDSA.
	EcdsaHashFunction ECDSAHashFunction `protobuf:"varint,3,opt,name=ecdsa_hash_function,json=ecdsaHashFunction,proto3,enum=mpcvault.platform.v1.ECDSAHashFunction" json:"ecdsa_hash_function,omitempty"`
}

func (x *RawMessage) Reset() {
	*x = RawMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage) ProtoMessage() {}

func (x *RawMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage.ProtoReflect.Descriptor instead.
func (*RawMessage) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{9}
}

func (x *RawMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RawMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *RawMessage) GetEcdsaHashFunction() ECDSAHashFunction {
	if x != nil {
		return x.EcdsaHashFunction
	}
	return ECDSAHashFunction_ECDSA_HASH_FUNCTION_UNSPECIFIED
}

// EVMGas is the gas fee settings for an EVM transaction.
type EVMGas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max_fee is the maximum fee that the user is willing to pay, denominated in wei.
	MaxFee *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// max_priority_fee is the maximum priority fee that the user is willing to pay for EIP-1559 transactions, denominated in wei.
	// leave this field empty if you do not want to use EIP-1559.
	MaxPriorityFee *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=max_priority_fee,json=maxPriorityFee,proto3" json:"max_priority_fee,omitempty"`
	// gas_limit is the maximum amount of gas that the tx is allowed to consume.
	GasLimit *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (x *EVMGas) Reset() {
	*x = EVMGas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMGas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMGas) ProtoMessage() {}

func (x *EVMGas) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMGas.ProtoReflect.Descriptor instead.
func (*EVMGas) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *EVMGas) GetMaxFee() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxFee
	}
	return nil
}

func (x *EVMGas) GetMaxPriorityFee() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxPriorityFee
	}
	return nil
}

func (x *EVMGas) GetGasLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

type EVMSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chain_id is the chain id of the network.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// value is the amount of the native token to send, denominated in wei.
	Value  string  `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	GasFee *EVMGas `protobuf:"bytes,5,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
	// nonce is the nonce of the transaction. If this field is not set, we will use the next nonce of the sender.
	// when chain_id is a custom chain, this field is required.
	Nonce *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EVMSendNative) Reset() {
	*x = EVMSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMSendNative) ProtoMessage() {}

func (x *EVMSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMSendNative.ProtoReflect.Descriptor instead.
func (*EVMSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{11}
}

func (x *EVMSendNative) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EVMSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EVMSendNative) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EVMSendNative) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EVMSendNative) GetGasFee() *EVMGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

func (x *EVMSendNative) GetNonce() *wrapperspb.Int64Value {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type EVMSendERC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chain_id is the chain id of the network.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// token_contract_address is the address of the ERC20 token contract.
	TokenContractAddress string `protobuf:"bytes,4,opt,name=token_contract_address,json=tokenContractAddress,proto3" json:"token_contract_address,omitempty"`
	// amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
	// We will use the contract's decimals to convert the amount.
	Amount string  `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	GasFee *EVMGas `protobuf:"bytes,6,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
	// nonce is the nonce of the transaction. If this field is not set, we will use the next nonce of the sender.
	// when chain_id is a custom chain, this field is required.
	Nonce *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EVMSendERC20) Reset() {
	*x = EVMSendERC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMSendERC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMSendERC20) ProtoMessage() {}

func (x *EVMSendERC20) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMSendERC20.ProtoReflect.Descriptor instead.
func (*EVMSendERC20) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{12}
}

func (x *EVMSendERC20) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EVMSendERC20) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EVMSendERC20) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EVMSendERC20) GetTokenContractAddress() string {
	if x != nil {
		return x.TokenContractAddress
	}
	return ""
}

func (x *EVMSendERC20) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EVMSendERC20) GetGasFee() *EVMGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

func (x *EVMSendERC20) GetNonce() *wrapperspb.Int64Value {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type EVMSendCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chain_id is the chain id of the network.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// value is the amount of the native token to send, denominated in wei.
	Value  string  `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Input  []byte  `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	GasFee *EVMGas `protobuf:"bytes,6,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
	// nonce is the nonce of the transaction. If this field is not set, we will use the next nonce of the sender.
	// when chain_id is a custom chain, this field is required.
	Nonce *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EVMSendCustom) Reset() {
	*x = EVMSendCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMSendCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMSendCustom) ProtoMessage() {}

func (x *EVMSendCustom) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMSendCustom.ProtoReflect.Descriptor instead.
func (*EVMSendCustom) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{13}
}

func (x *EVMSendCustom) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EVMSendCustom) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EVMSendCustom) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EVMSendCustom) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EVMSendCustom) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EVMSendCustom) GetGasFee() *EVMGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

func (x *EVMSendCustom) GetNonce() *wrapperspb.Int64Value {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type BTCSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// amount is the amount of the native token to send, denominated in satoshi.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// network_fee is the network fee that the user is willing to pay, denominated in sat/b.
	NetworkFee uint64 `protobuf:"varint,4,opt,name=network_fee,json=networkFee,proto3" json:"network_fee,omitempty"`
}

func (x *BTCSendNative) Reset() {
	*x = BTCSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSendNative) ProtoMessage() {}

func (x *BTCSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSendNative.ProtoReflect.Descriptor instead.
func (*BTCSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{14}
}

func (x *BTCSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *BTCSendNative) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *BTCSendNative) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BTCSendNative) GetNetworkFee() uint64 {
	if x != nil {
		return x.NetworkFee
	}
	return 0
}

type TronSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// value is the amount of the native token to send, denominated in sun.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TronSendNative) Reset() {
	*x = TronSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TronSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TronSendNative) ProtoMessage() {}

func (x *TronSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TronSendNative.ProtoReflect.Descriptor instead.
func (*TronSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{15}
}

func (x *TronSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TronSendNative) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TronSendNative) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TronSendTRC10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// asset_name identifies the token to be sent.
	AssetName string `protobuf:"bytes,3,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TronSendTRC10) Reset() {
	*x = TronSendTRC10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TronSendTRC10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TronSendTRC10) ProtoMessage() {}

func (x *TronSendTRC10) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TronSendTRC10.ProtoReflect.Descriptor instead.
func (*TronSendTRC10) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{16}
}

func (x *TronSendTRC10) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TronSendTRC10) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TronSendTRC10) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TronSendTRC10) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TronSendTRC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// contract_address is the address of the token.
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// (optional) fee_limit is the maximum fee that the user is willing to pay, denominated in sun.
	FeeLimit *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
}

func (x *TronSendTRC20) Reset() {
	*x = TronSendTRC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TronSendTRC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TronSendTRC20) ProtoMessage() {}

func (x *TronSendTRC20) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TronSendTRC20.ProtoReflect.Descriptor instead.
func (*TronSendTRC20) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{17}
}

func (x *TronSendTRC20) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TronSendTRC20) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TronSendTRC20) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TronSendTRC20) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TronSendTRC20) GetFeeLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.FeeLimit
	}
	return nil
}

type AptosGas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) max_gas_amount is the maximum gas units that the transaction can use
	// https://aptos.dev/concepts/gas-txn-fee/#unit-of-gas
	MaxGasAmount *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`
	// (optional) gas_unit_price is the price that the user is willing to pay, denominated in octa.
	GasUnitPrice *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`
}

func (x *AptosGas) Reset() {
	*x = AptosGas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosGas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosGas) ProtoMessage() {}

func (x *AptosGas) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosGas.ProtoReflect.Descriptor instead.
func (*AptosGas) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{18}
}

func (x *AptosGas) GetMaxGasAmount() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxGasAmount
	}
	return nil
}

func (x *AptosGas) GetGasUnitPrice() *wrapperspb.StringValue {
	if x != nil {
		return x.GasUnitPrice
	}
	return nil
}

type AptosSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// please use 1 for mainnet. MPCVault does not support Aptos testnet at the moment.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// value is the amount of the native token to send, denominated in octa.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// (optional) specify the gas fee for the transaction.
	GasFee *AptosGas `protobuf:"bytes,5,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
}

func (x *AptosSendNative) Reset() {
	*x = AptosSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosSendNative) ProtoMessage() {}

func (x *AptosSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosSendNative.ProtoReflect.Descriptor instead.
func (*AptosSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{19}
}

func (x *AptosSendNative) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AptosSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AptosSendNative) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *AptosSendNative) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AptosSendNative) GetGasFee() *AptosGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

type AptosSendCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// please use 1 for mainnet. MPCVault does not support Aptos testnet at the moment.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// coin_tag identifies the coin to be sent.
	CoinTag string `protobuf:"bytes,4,opt,name=coin_tag,json=coinTag,proto3" json:"coin_tag,omitempty"`
	// amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// (optional) specify the gas fee for the transaction.
	GasFee *AptosGas `protobuf:"bytes,6,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
}

func (x *AptosSendCoin) Reset() {
	*x = AptosSendCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosSendCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosSendCoin) ProtoMessage() {}

func (x *AptosSendCoin) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosSendCoin.ProtoReflect.Descriptor instead.
func (*AptosSendCoin) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{20}
}

func (x *AptosSendCoin) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AptosSendCoin) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AptosSendCoin) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *AptosSendCoin) GetCoinTag() string {
	if x != nil {
		return x.CoinTag
	}
	return ""
}

func (x *AptosSendCoin) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AptosSendCoin) GetGasFee() *AptosGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

type AptosSendCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// please use 1 for mainnet. MPCVault does not support Aptos testnet at the moment.
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// payload can be JSON or the bcs-serialized bytes of the transaction.
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// (optional) specify the gas fee for the transaction.
	GasFee *AptosGas `protobuf:"bytes,4,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
}

func (x *AptosSendCustom) Reset() {
	*x = AptosSendCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosSendCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosSendCustom) ProtoMessage() {}

func (x *AptosSendCustom) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosSendCustom.ProtoReflect.Descriptor instead.
func (*AptosSendCustom) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{21}
}

func (x *AptosSendCustom) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AptosSendCustom) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AptosSendCustom) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AptosSendCustom) GetGasFee() *AptosGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

type SuiGas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) budget is the maximum fee that the user is willing to pay, denominated in mist.
	Budget *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=budget,proto3" json:"budget,omitempty"`
	// (optional) price is the price that the user is willing to pay, denominated in mist.
	Price *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SuiGas) Reset() {
	*x = SuiGas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiGas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiGas) ProtoMessage() {}

func (x *SuiGas) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiGas.ProtoReflect.Descriptor instead.
func (*SuiGas) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{22}
}

func (x *SuiGas) GetBudget() *wrapperspb.StringValue {
	if x != nil {
		return x.Budget
	}
	return nil
}

func (x *SuiGas) GetPrice() *wrapperspb.StringValue {
	if x != nil {
		return x.Price
	}
	return nil
}

type SuiSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// value is the amount of the native token to send, denominated in mist.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// (optional) specify the gas fee for the transaction.
	GasFee *SuiGas `protobuf:"bytes,4,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
}

func (x *SuiSendNative) Reset() {
	*x = SuiSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiSendNative) ProtoMessage() {}

func (x *SuiSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiSendNative.ProtoReflect.Descriptor instead.
func (*SuiSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{23}
}

func (x *SuiSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SuiSendNative) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SuiSendNative) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SuiSendNative) GetGasFee() *SuiGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

type SuiSendCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// coin_tag identifies the coin to be sent.
	CoinTag string `protobuf:"bytes,3,opt,name=coin_tag,json=coinTag,proto3" json:"coin_tag,omitempty"`
	// amount is the amount of coins to send. You should use whole integer representation. [amount * 10^decimals]
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// (optional) specify the gas fee for the transaction.
	GasFee *SuiGas `protobuf:"bytes,5,opt,name=gas_fee,json=gasFee,proto3" json:"gas_fee,omitempty"`
}

func (x *SuiSendCoin) Reset() {
	*x = SuiSendCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiSendCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiSendCoin) ProtoMessage() {}

func (x *SuiSendCoin) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiSendCoin.ProtoReflect.Descriptor instead.
func (*SuiSendCoin) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{24}
}

func (x *SuiSendCoin) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SuiSendCoin) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SuiSendCoin) GetCoinTag() string {
	if x != nil {
		return x.CoinTag
	}
	return ""
}

func (x *SuiSendCoin) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SuiSendCoin) GetGasFee() *SuiGas {
	if x != nil {
		return x.GasFee
	}
	return nil
}

type SuiSendCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// payload can be JSON or the bcs-serialized bytes of the transaction.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SuiSendCustom) Reset() {
	*x = SuiSendCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiSendCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiSendCustom) ProtoMessage() {}

func (x *SuiSendCustom) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiSendCustom.ProtoReflect.Descriptor instead.
func (*SuiSendCustom) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{25}
}

func (x *SuiSendCustom) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SuiSendCustom) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SolanaSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the account address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// value is the amount of the native token to send, denominated in lamports.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SolanaSendNative) Reset() {
	*x = SolanaSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSendNative) ProtoMessage() {}

func (x *SolanaSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSendNative.ProtoReflect.Descriptor instead.
func (*SolanaSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{26}
}

func (x *SolanaSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SolanaSendNative) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SolanaSendNative) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SolanaSendSPLToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// to is the account address of the recipient.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// mint_address is the address of the token.
	MintAddress string `protobuf:"bytes,3,opt,name=mint_address,json=mintAddress,proto3" json:"mint_address,omitempty"`
	// amount is the amount of tokens to send. You should use whole integer representation. [amount * 10^decimals]
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SolanaSendSPLToken) Reset() {
	*x = SolanaSendSPLToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSendSPLToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSendSPLToken) ProtoMessage() {}

func (x *SolanaSendSPLToken) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSendSPLToken.ProtoReflect.Descriptor instead.
func (*SolanaSendSPLToken) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{27}
}

func (x *SolanaSendSPLToken) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SolanaSendSPLToken) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SolanaSendSPLToken) GetMintAddress() string {
	if x != nil {
		return x.MintAddress
	}
	return ""
}

func (x *SolanaSendSPLToken) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreateSigningRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of the signing request. It is a oneof field.
	//
	// Types that are assignable to Type:
	//
	//	*CreateSigningRequestRequest_EvmSendNative
	//	*CreateSigningRequestRequest_EvmSendErc20
	//	*CreateSigningRequestRequest_EvmSendCustom
	//	*CreateSigningRequestRequest_BtcSendNative
	//	*CreateSigningRequestRequest_TronSendNative
	//	*CreateSigningRequestRequest_TronSendTrc10
	//	*CreateSigningRequestRequest_TronSendTrc20
	//	*CreateSigningRequestRequest_AptosSendNative
	//	*CreateSigningRequestRequest_AptosSendCoin
	//	*CreateSigningRequestRequest_AptosSendCustom
	//	*CreateSigningRequestRequest_SuiSendNative
	//	*CreateSigningRequestRequest_SuiSendCoin
	//	*CreateSigningRequestRequest_SuiSendCustom
	//	*CreateSigningRequestRequest_SolanaSendNative
	//	*CreateSigningRequestRequest_SolanaSendSplToken
	//	*CreateSigningRequestRequest_EvmMessage
	//	*CreateSigningRequestRequest_AptosMessage
	//	*CreateSigningRequestRequest_SolanaMessage
	//	*CreateSigningRequestRequest_RawMessage
	Type isCreateSigningRequestRequest_Type `protobuf_oneof:"type"`
	// notes is the transaction notes for the signing request.
	Notes *wrapperspb.StringValue `protobuf:"bytes,1000,opt,name=notes,proto3" json:"notes,omitempty"`
	// vault_uuid is the UUID of the vault that the signing request will be created in.
	VaultUuid *wrapperspb.StringValue `protobuf:"bytes,1001,opt,name=vault_uuid,json=vaultUuid,proto3" json:"vault_uuid,omitempty"`
	// callback_client_signer_public_key is the public key of the api client signer for callback
	// It is used to identify the where we should send the callback to. If empty, we will show the signing request in the MPCVault mobile app for manual signing.
	// Note that if the signing request is created by an api wallet, this field must be set as api wallets can only be signed by the api client signer at the moment.
	CallbackClientSignerPublicKey *wrapperspb.StringValue `protobuf:"bytes,1002,opt,name=callback_client_signer_public_key,json=callbackClientSignerPublicKey,proto3" json:"callback_client_signer_public_key,omitempty"`
}

func (x *CreateSigningRequestRequest) Reset() {
	*x = CreateSigningRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSigningRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSigningRequestRequest) ProtoMessage() {}

func (x *CreateSigningRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSigningRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateSigningRequestRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{28}
}

func (m *CreateSigningRequestRequest) GetType() isCreateSigningRequestRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetEvmSendNative() *EVMSendNative {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_EvmSendNative); ok {
		return x.EvmSendNative
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetEvmSendErc20() *EVMSendERC20 {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_EvmSendErc20); ok {
		return x.EvmSendErc20
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetEvmSendCustom() *EVMSendCustom {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_EvmSendCustom); ok {
		return x.EvmSendCustom
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetBtcSendNative() *BTCSendNative {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_BtcSendNative); ok {
		return x.BtcSendNative
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetTronSendNative() *TronSendNative {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_TronSendNative); ok {
		return x.TronSendNative
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetTronSendTrc10() *TronSendTRC10 {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_TronSendTrc10); ok {
		return x.TronSendTrc10
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetTronSendTrc20() *TronSendTRC20 {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_TronSendTrc20); ok {
		return x.TronSendTrc20
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetAptosSendNative() *AptosSendNative {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_AptosSendNative); ok {
		return x.AptosSendNative
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetAptosSendCoin() *AptosSendCoin {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_AptosSendCoin); ok {
		return x.AptosSendCoin
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetAptosSendCustom() *AptosSendCustom {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_AptosSendCustom); ok {
		return x.AptosSendCustom
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetSuiSendNative() *SuiSendNative {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_SuiSendNative); ok {
		return x.SuiSendNative
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetSuiSendCoin() *SuiSendCoin {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_SuiSendCoin); ok {
		return x.SuiSendCoin
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetSuiSendCustom() *SuiSendCustom {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_SuiSendCustom); ok {
		return x.SuiSendCustom
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetSolanaSendNative() *SolanaSendNative {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_SolanaSendNative); ok {
		return x.SolanaSendNative
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetSolanaSendSplToken() *SolanaSendSPLToken {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_SolanaSendSplToken); ok {
		return x.SolanaSendSplToken
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetEvmMessage() *EVMMessage {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_EvmMessage); ok {
		return x.EvmMessage
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetAptosMessage() *AptosMessage {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_AptosMessage); ok {
		return x.AptosMessage
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetSolanaMessage() *SolanaMessage {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_SolanaMessage); ok {
		return x.SolanaMessage
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetRawMessage() *RawMessage {
	if x, ok := x.GetType().(*CreateSigningRequestRequest_RawMessage); ok {
		return x.RawMessage
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetVaultUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.VaultUuid
	}
	return nil
}

func (x *CreateSigningRequestRequest) GetCallbackClientSignerPublicKey() *wrapperspb.StringValue {
	if x != nil {
		return x.CallbackClientSignerPublicKey
	}
	return nil
}

type isCreateSigningRequestRequest_Type interface {
	isCreateSigningRequestRequest_Type()
}

type CreateSigningRequestRequest_EvmSendNative struct {
	EvmSendNative *EVMSendNative `protobuf:"bytes,1,opt,name=evm_send_native,json=evmSendNative,proto3,oneof"`
}

type CreateSigningRequestRequest_EvmSendErc20 struct {
	EvmSendErc20 *EVMSendERC20 `protobuf:"bytes,2,opt,name=evm_send_erc20,json=evmSendErc20,proto3,oneof"`
}

type CreateSigningRequestRequest_EvmSendCustom struct {
	EvmSendCustom *EVMSendCustom `protobuf:"bytes,3,opt,name=evm_send_custom,json=evmSendCustom,proto3,oneof"`
}

type CreateSigningRequestRequest_BtcSendNative struct {
	BtcSendNative *BTCSendNative `protobuf:"bytes,4,opt,name=btc_send_native,json=btcSendNative,proto3,oneof"`
}

type CreateSigningRequestRequest_TronSendNative struct {
	TronSendNative *TronSendNative `protobuf:"bytes,5,opt,name=tron_send_native,json=tronSendNative,proto3,oneof"`
}

type CreateSigningRequestRequest_TronSendTrc10 struct {
	TronSendTrc10 *TronSendTRC10 `protobuf:"bytes,6,opt,name=tron_send_trc10,json=tronSendTrc10,proto3,oneof"`
}

type CreateSigningRequestRequest_TronSendTrc20 struct {
	TronSendTrc20 *TronSendTRC20 `protobuf:"bytes,7,opt,name=tron_send_trc20,json=tronSendTrc20,proto3,oneof"`
}

type CreateSigningRequestRequest_AptosSendNative struct {
	AptosSendNative *AptosSendNative `protobuf:"bytes,8,opt,name=aptos_send_native,json=aptosSendNative,proto3,oneof"`
}

type CreateSigningRequestRequest_AptosSendCoin struct {
	AptosSendCoin *AptosSendCoin `protobuf:"bytes,9,opt,name=aptos_send_coin,json=aptosSendCoin,proto3,oneof"`
}

type CreateSigningRequestRequest_AptosSendCustom struct {
	AptosSendCustom *AptosSendCustom `protobuf:"bytes,10,opt,name=aptos_send_custom,json=aptosSendCustom,proto3,oneof"`
}

type CreateSigningRequestRequest_SuiSendNative struct {
	SuiSendNative *SuiSendNative `protobuf:"bytes,11,opt,name=sui_send_native,json=suiSendNative,proto3,oneof"`
}

type CreateSigningRequestRequest_SuiSendCoin struct {
	SuiSendCoin *SuiSendCoin `protobuf:"bytes,12,opt,name=sui_send_coin,json=suiSendCoin,proto3,oneof"`
}

type CreateSigningRequestRequest_SuiSendCustom struct {
	SuiSendCustom *SuiSendCustom `protobuf:"bytes,13,opt,name=sui_send_custom,json=suiSendCustom,proto3,oneof"`
}

type CreateSigningRequestRequest_SolanaSendNative struct {
	SolanaSendNative *SolanaSendNative `protobuf:"bytes,14,opt,name=solana_send_native,json=solanaSendNative,proto3,oneof"`
}

type CreateSigningRequestRequest_SolanaSendSplToken struct {
	SolanaSendSplToken *SolanaSendSPLToken `protobuf:"bytes,15,opt,name=solana_send_spl_token,json=solanaSendSplToken,proto3,oneof"`
}

type CreateSigningRequestRequest_EvmMessage struct {
	EvmMessage *EVMMessage `protobuf:"bytes,16,opt,name=evm_message,json=evmMessage,proto3,oneof"`
}

type CreateSigningRequestRequest_AptosMessage struct {
	AptosMessage *AptosMessage `protobuf:"bytes,17,opt,name=aptos_message,json=aptosMessage,proto3,oneof"`
}

type CreateSigningRequestRequest_SolanaMessage struct {
	SolanaMessage *SolanaMessage `protobuf:"bytes,18,opt,name=solana_message,json=solanaMessage,proto3,oneof"`
}

type CreateSigningRequestRequest_RawMessage struct {
	RawMessage *RawMessage `protobuf:"bytes,19,opt,name=raw_message,json=rawMessage,proto3,oneof"`
}

func (*CreateSigningRequestRequest_EvmSendNative) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_EvmSendErc20) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_EvmSendCustom) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_BtcSendNative) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_TronSendNative) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_TronSendTrc10) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_TronSendTrc20) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_AptosSendNative) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_AptosSendCoin) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_AptosSendCustom) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_SuiSendNative) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_SuiSendCoin) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_SuiSendCustom) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_SolanaSendNative) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_SolanaSendSplToken) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_EvmMessage) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_AptosMessage) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_SolanaMessage) isCreateSigningRequestRequest_Type() {}

func (*CreateSigningRequestRequest_RawMessage) isCreateSigningRequestRequest_Type() {}

type CreateSigningRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signing_request is the signing request that was created.
	SigningRequest *SigningRequest `protobuf:"bytes,1,opt,name=signing_request,json=signingRequest,proto3" json:"signing_request,omitempty"`
	Error          *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateSigningRequestResponse) Reset() {
	*x = CreateSigningRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSigningRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSigningRequestResponse) ProtoMessage() {}

func (x *CreateSigningRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSigningRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateSigningRequestResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{29}
}

func (x *CreateSigningRequestResponse) GetSigningRequest() *SigningRequest {
	if x != nil {
		return x.SigningRequest
	}
	return nil
}

func (x *CreateSigningRequestResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type RejectSigningRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RejectSigningRequestRequest) Reset() {
	*x = RejectSigningRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectSigningRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectSigningRequestRequest) ProtoMessage() {}

func (x *RejectSigningRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectSigningRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectSigningRequestRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{30}
}

func (x *RejectSigningRequestRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type RejectSigningRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RejectSigningRequestResponse) Reset() {
	*x = RejectSigningRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectSigningRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectSigningRequestResponse) ProtoMessage() {}

func (x *RejectSigningRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectSigningRequestResponse.ProtoReflect.Descriptor instead.
func (*RejectSigningRequestResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{31}
}

func (x *RejectSigningRequestResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetSigningRequestDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetSigningRequestDetailsRequest) Reset() {
	*x = GetSigningRequestDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSigningRequestDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSigningRequestDetailsRequest) ProtoMessage() {}

func (x *GetSigningRequestDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSigningRequestDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetSigningRequestDetailsRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetSigningRequestDetailsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetSigningRequestDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningRequest *SigningRequest `protobuf:"bytes,1,opt,name=signing_request,json=signingRequest,proto3" json:"signing_request,omitempty"`
	Error          *Error          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetSigningRequestDetailsResponse) Reset() {
	*x = GetSigningRequestDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSigningRequestDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSigningRequestDetailsResponse) ProtoMessage() {}

func (x *GetSigningRequestDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSigningRequestDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetSigningRequestDetailsResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetSigningRequestDetailsResponse) GetSigningRequest() *SigningRequest {
	if x != nil {
		return x.SigningRequest
	}
	return nil
}

func (x *GetSigningRequestDetailsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid is the unique identifier of the signing request.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// status is the status of the signing request. STATUS_SUCCEEDED only means that the signing request has been signed.
	// it does not mean that the transaction itself is successful.
	Status SigningRequest_Status `protobuf:"varint,2,opt,name=status,proto3,enum=mpcvault.platform.v1.SigningRequest_Status" json:"status,omitempty"`
	// failed_reason is the reason why the signing request failed, only set if status is STATUS_FAILED.
	FailedReason string `protobuf:"bytes,3,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
	// tx_hash is the hash of the transaction, only set if status is STATUS_SUCCEEDED.
	// This does not mean that the transaction it self is successful. It only means that the signing request has been signed.
	TxHash string `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// creation_timestamp is the timestamp when the signing request was created.
	CreationTimestamp uint64 `protobuf:"varint,5,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// Types that are assignable to Type:
	//
	//	*SigningRequest_EvmSendNative
	//	*SigningRequest_EvmSendErc20
	//	*SigningRequest_EvmSendCustom
	//	*SigningRequest_BtcSendNative
	//	*SigningRequest_TronSendNative
	//	*SigningRequest_TronSendTrc10
	//	*SigningRequest_TronSendTrc20
	//	*SigningRequest_AptosSendNative
	//	*SigningRequest_AptosSendCoin
	//	*SigningRequest_AptosSendCustom
	//	*SigningRequest_SuiSendNative
	//	*SigningRequest_SuiSendCoin
	//	*SigningRequest_SuiSendCustom
	//	*SigningRequest_SolanaSendNative
	//	*SigningRequest_SolanaSendSplToken
	//	*SigningRequest_CreateWallet
	//	*SigningRequest_EvmMessage
	//	*SigningRequest_AptosMessage
	//	*SigningRequest_SolanaMessage
	//	*SigningRequest_RawMessage
	Type isSigningRequest_Type `protobuf_oneof:"type"`
	// vault_uuid is the UUID of the vault that the signing request was created in.
	VaultUuid *wrapperspb.StringValue `protobuf:"bytes,1000,opt,name=vault_uuid,json=vaultUuid,proto3" json:"vault_uuid,omitempty"`
	// callback_client_signer_public_key is the public key of the api client signer for callback. This field can be empty.
	CallbackClientSignerPublicKey *wrapperspb.StringValue `protobuf:"bytes,1001,opt,name=callback_client_signer_public_key,json=callbackClientSignerPublicKey,proto3" json:"callback_client_signer_public_key,omitempty"`
}

func (x *SigningRequest) Reset() {
	*x = SigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningRequest) ProtoMessage() {}

func (x *SigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningRequest.ProtoReflect.Descriptor instead.
func (*SigningRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{34}
}

func (x *SigningRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SigningRequest) GetStatus() SigningRequest_Status {
	if x != nil {
		return x.Status
	}
	return SigningRequest_STATUS_UNSPECIFIED
}

func (x *SigningRequest) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *SigningRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *SigningRequest) GetCreationTimestamp() uint64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (m *SigningRequest) GetType() isSigningRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SigningRequest) GetEvmSendNative() *EVMSendNative {
	if x, ok := x.GetType().(*SigningRequest_EvmSendNative); ok {
		return x.EvmSendNative
	}
	return nil
}

func (x *SigningRequest) GetEvmSendErc20() *EVMSendERC20 {
	if x, ok := x.GetType().(*SigningRequest_EvmSendErc20); ok {
		return x.EvmSendErc20
	}
	return nil
}

func (x *SigningRequest) GetEvmSendCustom() *EVMSendCustom {
	if x, ok := x.GetType().(*SigningRequest_EvmSendCustom); ok {
		return x.EvmSendCustom
	}
	return nil
}

func (x *SigningRequest) GetBtcSendNative() *BTCSendNative {
	if x, ok := x.GetType().(*SigningRequest_BtcSendNative); ok {
		return x.BtcSendNative
	}
	return nil
}

func (x *SigningRequest) GetTronSendNative() *TronSendNative {
	if x, ok := x.GetType().(*SigningRequest_TronSendNative); ok {
		return x.TronSendNative
	}
	return nil
}

func (x *SigningRequest) GetTronSendTrc10() *TronSendTRC10 {
	if x, ok := x.GetType().(*SigningRequest_TronSendTrc10); ok {
		return x.TronSendTrc10
	}
	return nil
}

func (x *SigningRequest) GetTronSendTrc20() *TronSendTRC20 {
	if x, ok := x.GetType().(*SigningRequest_TronSendTrc20); ok {
		return x.TronSendTrc20
	}
	return nil
}

func (x *SigningRequest) GetAptosSendNative() *AptosSendNative {
	if x, ok := x.GetType().(*SigningRequest_AptosSendNative); ok {
		return x.AptosSendNative
	}
	return nil
}

func (x *SigningRequest) GetAptosSendCoin() *AptosSendCoin {
	if x, ok := x.GetType().(*SigningRequest_AptosSendCoin); ok {
		return x.AptosSendCoin
	}
	return nil
}

func (x *SigningRequest) GetAptosSendCustom() *AptosSendCustom {
	if x, ok := x.GetType().(*SigningRequest_AptosSendCustom); ok {
		return x.AptosSendCustom
	}
	return nil
}

func (x *SigningRequest) GetSuiSendNative() *SuiSendNative {
	if x, ok := x.GetType().(*SigningRequest_SuiSendNative); ok {
		return x.SuiSendNative
	}
	return nil
}

func (x *SigningRequest) GetSuiSendCoin() *SuiSendCoin {
	if x, ok := x.GetType().(*SigningRequest_SuiSendCoin); ok {
		return x.SuiSendCoin
	}
	return nil
}

func (x *SigningRequest) GetSuiSendCustom() *SuiSendCustom {
	if x, ok := x.GetType().(*SigningRequest_SuiSendCustom); ok {
		return x.SuiSendCustom
	}
	return nil
}

func (x *SigningRequest) GetSolanaSendNative() *SolanaSendNative {
	if x, ok := x.GetType().(*SigningRequest_SolanaSendNative); ok {
		return x.SolanaSendNative
	}
	return nil
}

func (x *SigningRequest) GetSolanaSendSplToken() *SolanaSendSPLToken {
	if x, ok := x.GetType().(*SigningRequest_SolanaSendSplToken); ok {
		return x.SolanaSendSplToken
	}
	return nil
}

func (x *SigningRequest) GetCreateWallet() *CreateWalletRequest {
	if x, ok := x.GetType().(*SigningRequest_CreateWallet); ok {
		return x.CreateWallet
	}
	return nil
}

func (x *SigningRequest) GetEvmMessage() *EVMMessage {
	if x, ok := x.GetType().(*SigningRequest_EvmMessage); ok {
		return x.EvmMessage
	}
	return nil
}

func (x *SigningRequest) GetAptosMessage() *AptosMessage {
	if x, ok := x.GetType().(*SigningRequest_AptosMessage); ok {
		return x.AptosMessage
	}
	return nil
}

func (x *SigningRequest) GetSolanaMessage() *SolanaMessage {
	if x, ok := x.GetType().(*SigningRequest_SolanaMessage); ok {
		return x.SolanaMessage
	}
	return nil
}

func (x *SigningRequest) GetRawMessage() *RawMessage {
	if x, ok := x.GetType().(*SigningRequest_RawMessage); ok {
		return x.RawMessage
	}
	return nil
}

func (x *SigningRequest) GetVaultUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.VaultUuid
	}
	return nil
}

func (x *SigningRequest) GetCallbackClientSignerPublicKey() *wrapperspb.StringValue {
	if x != nil {
		return x.CallbackClientSignerPublicKey
	}
	return nil
}

type isSigningRequest_Type interface {
	isSigningRequest_Type()
}

type SigningRequest_EvmSendNative struct {
	EvmSendNative *EVMSendNative `protobuf:"bytes,6,opt,name=evm_send_native,json=evmSendNative,proto3,oneof"`
}

type SigningRequest_EvmSendErc20 struct {
	EvmSendErc20 *EVMSendERC20 `protobuf:"bytes,7,opt,name=evm_send_erc20,json=evmSendErc20,proto3,oneof"`
}

type SigningRequest_EvmSendCustom struct {
	EvmSendCustom *EVMSendCustom `protobuf:"bytes,8,opt,name=evm_send_custom,json=evmSendCustom,proto3,oneof"`
}

type SigningRequest_BtcSendNative struct {
	BtcSendNative *BTCSendNative `protobuf:"bytes,9,opt,name=btc_send_native,json=btcSendNative,proto3,oneof"`
}

type SigningRequest_TronSendNative struct {
	TronSendNative *TronSendNative `protobuf:"bytes,10,opt,name=tron_send_native,json=tronSendNative,proto3,oneof"`
}

type SigningRequest_TronSendTrc10 struct {
	TronSendTrc10 *TronSendTRC10 `protobuf:"bytes,11,opt,name=tron_send_trc10,json=tronSendTrc10,proto3,oneof"`
}

type SigningRequest_TronSendTrc20 struct {
	TronSendTrc20 *TronSendTRC20 `protobuf:"bytes,12,opt,name=tron_send_trc20,json=tronSendTrc20,proto3,oneof"`
}

type SigningRequest_AptosSendNative struct {
	AptosSendNative *AptosSendNative `protobuf:"bytes,13,opt,name=aptos_send_native,json=aptosSendNative,proto3,oneof"`
}

type SigningRequest_AptosSendCoin struct {
	AptosSendCoin *AptosSendCoin `protobuf:"bytes,14,opt,name=aptos_send_coin,json=aptosSendCoin,proto3,oneof"`
}

type SigningRequest_AptosSendCustom struct {
	AptosSendCustom *AptosSendCustom `protobuf:"bytes,15,opt,name=aptos_send_custom,json=aptosSendCustom,proto3,oneof"`
}

type SigningRequest_SuiSendNative struct {
	SuiSendNative *SuiSendNative `protobuf:"bytes,16,opt,name=sui_send_native,json=suiSendNative,proto3,oneof"`
}

type SigningRequest_SuiSendCoin struct {
	SuiSendCoin *SuiSendCoin `protobuf:"bytes,17,opt,name=sui_send_coin,json=suiSendCoin,proto3,oneof"`
}

type SigningRequest_SuiSendCustom struct {
	SuiSendCustom *SuiSendCustom `protobuf:"bytes,18,opt,name=sui_send_custom,json=suiSendCustom,proto3,oneof"`
}

type SigningRequest_SolanaSendNative struct {
	SolanaSendNative *SolanaSendNative `protobuf:"bytes,19,opt,name=solana_send_native,json=solanaSendNative,proto3,oneof"`
}

type SigningRequest_SolanaSendSplToken struct {
	SolanaSendSplToken *SolanaSendSPLToken `protobuf:"bytes,20,opt,name=solana_send_spl_token,json=solanaSendSplToken,proto3,oneof"`
}

type SigningRequest_CreateWallet struct {
	CreateWallet *CreateWalletRequest `protobuf:"bytes,21,opt,name=create_wallet,json=createWallet,proto3,oneof"`
}

type SigningRequest_EvmMessage struct {
	EvmMessage *EVMMessage `protobuf:"bytes,22,opt,name=evm_message,json=evmMessage,proto3,oneof"`
}

type SigningRequest_AptosMessage struct {
	AptosMessage *AptosMessage `protobuf:"bytes,23,opt,name=aptos_message,json=aptosMessage,proto3,oneof"`
}

type SigningRequest_SolanaMessage struct {
	SolanaMessage *SolanaMessage `protobuf:"bytes,24,opt,name=solana_message,json=solanaMessage,proto3,oneof"`
}

type SigningRequest_RawMessage struct {
	RawMessage *RawMessage `protobuf:"bytes,25,opt,name=raw_message,json=rawMessage,proto3,oneof"`
}

func (*SigningRequest_EvmSendNative) isSigningRequest_Type() {}

func (*SigningRequest_EvmSendErc20) isSigningRequest_Type() {}

func (*SigningRequest_EvmSendCustom) isSigningRequest_Type() {}

func (*SigningRequest_BtcSendNative) isSigningRequest_Type() {}

func (*SigningRequest_TronSendNative) isSigningRequest_Type() {}

func (*SigningRequest_TronSendTrc10) isSigningRequest_Type() {}

func (*SigningRequest_TronSendTrc20) isSigningRequest_Type() {}

func (*SigningRequest_AptosSendNative) isSigningRequest_Type() {}

func (*SigningRequest_AptosSendCoin) isSigningRequest_Type() {}

func (*SigningRequest_AptosSendCustom) isSigningRequest_Type() {}

func (*SigningRequest_SuiSendNative) isSigningRequest_Type() {}

func (*SigningRequest_SuiSendCoin) isSigningRequest_Type() {}

func (*SigningRequest_SuiSendCustom) isSigningRequest_Type() {}

func (*SigningRequest_SolanaSendNative) isSigningRequest_Type() {}

func (*SigningRequest_SolanaSendSplToken) isSigningRequest_Type() {}

func (*SigningRequest_CreateWallet) isSigningRequest_Type() {}

func (*SigningRequest_EvmMessage) isSigningRequest_Type() {}

func (*SigningRequest_AptosMessage) isSigningRequest_Type() {}

func (*SigningRequest_SolanaMessage) isSigningRequest_Type() {}

func (*SigningRequest_RawMessage) isSigningRequest_Type() {}

type BatchPaymentRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the address of the recipient.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// amount is the amount of the tokens to send.
	// For native tokens such as ether/btc, the amount is denominated in wei/satoshi.
	// For ERC20 tokens you should use whole integer representation. [amount * 10^decimals]
	// For bitcoin, the amount is denominated in satoshi.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// notes is a note for this entry in the batch payment.
	Notes *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *BatchPaymentRecipient) Reset() {
	*x = BatchPaymentRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPaymentRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPaymentRecipient) ProtoMessage() {}

func (x *BatchPaymentRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPaymentRecipient.ProtoReflect.Descriptor instead.
func (*BatchPaymentRecipient) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{35}
}

func (x *BatchPaymentRecipient) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BatchPaymentRecipient) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BatchPaymentRecipient) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

type EVMBatchSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From       string                   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Recipients []*BatchPaymentRecipient `protobuf:"bytes,3,rep,name=recipients,proto3" json:"recipients,omitempty"`
}

func (x *EVMBatchSendNative) Reset() {
	*x = EVMBatchSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMBatchSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMBatchSendNative) ProtoMessage() {}

func (x *EVMBatchSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMBatchSendNative.ProtoReflect.Descriptor instead.
func (*EVMBatchSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{36}
}

func (x *EVMBatchSendNative) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EVMBatchSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EVMBatchSendNative) GetRecipients() []*BatchPaymentRecipient {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type EVMBatchSendERC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// from is the sender wallet address. It has to be in this vault.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// token_contract_address is the address of the ERC20 token contract.
	TokenContractAddress string                   `protobuf:"bytes,3,opt,name=token_contract_address,json=tokenContractAddress,proto3" json:"token_contract_address,omitempty"`
	Recipients           []*BatchPaymentRecipient `protobuf:"bytes,4,rep,name=recipients,proto3" json:"recipients,omitempty"`
}

func (x *EVMBatchSendERC20) Reset() {
	*x = EVMBatchSendERC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMBatchSendERC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMBatchSendERC20) ProtoMessage() {}

func (x *EVMBatchSendERC20) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVMBatchSendERC20.ProtoReflect.Descriptor instead.
func (*EVMBatchSendERC20) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{37}
}

func (x *EVMBatchSendERC20) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *EVMBatchSendERC20) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EVMBatchSendERC20) GetTokenContractAddress() string {
	if x != nil {
		return x.TokenContractAddress
	}
	return ""
}

func (x *EVMBatchSendERC20) GetRecipients() []*BatchPaymentRecipient {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type BTCBatchSendNative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the sender wallet address. It has to be in this vault.
	From       string                   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Recipients []*BatchPaymentRecipient `protobuf:"bytes,2,rep,name=recipients,proto3" json:"recipients,omitempty"`
}

func (x *BTCBatchSendNative) Reset() {
	*x = BTCBatchSendNative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCBatchSendNative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCBatchSendNative) ProtoMessage() {}

func (x *BTCBatchSendNative) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCBatchSendNative.ProtoReflect.Descriptor instead.
func (*BTCBatchSendNative) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{38}
}

func (x *BTCBatchSendNative) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *BTCBatchSendNative) GetRecipients() []*BatchPaymentRecipient {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type CreateBatchPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the batch payment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// notes is the transaction notes for the batch payment.
	Notes *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// Types that are assignable to Type:
	//
	//	*CreateBatchPaymentRequest_EvmBatchSendNative
	//	*CreateBatchPaymentRequest_EvmBatchSendErc20
	//	*CreateBatchPaymentRequest_BtcBatchSendNative
	Type isCreateBatchPaymentRequest_Type `protobuf_oneof:"type"`
}

func (x *CreateBatchPaymentRequest) Reset() {
	*x = CreateBatchPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchPaymentRequest) ProtoMessage() {}

func (x *CreateBatchPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchPaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateBatchPaymentRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateBatchPaymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBatchPaymentRequest) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (m *CreateBatchPaymentRequest) GetType() isCreateBatchPaymentRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CreateBatchPaymentRequest) GetEvmBatchSendNative() *EVMBatchSendNative {
	if x, ok := x.GetType().(*CreateBatchPaymentRequest_EvmBatchSendNative); ok {
		return x.EvmBatchSendNative
	}
	return nil
}

func (x *CreateBatchPaymentRequest) GetEvmBatchSendErc20() *EVMBatchSendERC20 {
	if x, ok := x.GetType().(*CreateBatchPaymentRequest_EvmBatchSendErc20); ok {
		return x.EvmBatchSendErc20
	}
	return nil
}

func (x *CreateBatchPaymentRequest) GetBtcBatchSendNative() *BTCBatchSendNative {
	if x, ok := x.GetType().(*CreateBatchPaymentRequest_BtcBatchSendNative); ok {
		return x.BtcBatchSendNative
	}
	return nil
}

type isCreateBatchPaymentRequest_Type interface {
	isCreateBatchPaymentRequest_Type()
}

type CreateBatchPaymentRequest_EvmBatchSendNative struct {
	EvmBatchSendNative *EVMBatchSendNative `protobuf:"bytes,3,opt,name=evm_batch_send_native,json=evmBatchSendNative,proto3,oneof"`
}

type CreateBatchPaymentRequest_EvmBatchSendErc20 struct {
	EvmBatchSendErc20 *EVMBatchSendERC20 `protobuf:"bytes,4,opt,name=evm_batch_send_erc20,json=evmBatchSendErc20,proto3,oneof"`
}

type CreateBatchPaymentRequest_BtcBatchSendNative struct {
	BtcBatchSendNative *BTCBatchSendNative `protobuf:"bytes,5,opt,name=btc_batch_send_native,json=btcBatchSendNative,proto3,oneof"`
}

func (*CreateBatchPaymentRequest_EvmBatchSendNative) isCreateBatchPaymentRequest_Type() {}

func (*CreateBatchPaymentRequest_EvmBatchSendErc20) isCreateBatchPaymentRequest_Type() {}

func (*CreateBatchPaymentRequest_BtcBatchSendNative) isCreateBatchPaymentRequest_Type() {}

type CreateBatchPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPayment *BatchPayment `protobuf:"bytes,1,opt,name=batch_payment,json=batchPayment,proto3" json:"batch_payment,omitempty"`
	Error        *Error        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateBatchPaymentResponse) Reset() {
	*x = CreateBatchPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchPaymentResponse) ProtoMessage() {}

func (x *CreateBatchPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchPaymentResponse.ProtoReflect.Descriptor instead.
func (*CreateBatchPaymentResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{40}
}

func (x *CreateBatchPaymentResponse) GetBatchPayment() *BatchPayment {
	if x != nil {
		return x.BatchPayment
	}
	return nil
}

func (x *CreateBatchPaymentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetBatchPaymentDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetBatchPaymentDetailsRequest) Reset() {
	*x = GetBatchPaymentDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchPaymentDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchPaymentDetailsRequest) ProtoMessage() {}

func (x *GetBatchPaymentDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchPaymentDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetBatchPaymentDetailsRequest) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{41}
}

func (x *GetBatchPaymentDetailsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetBatchPaymentDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchPayment *BatchPayment `protobuf:"bytes,1,opt,name=batch_payment,json=batchPayment,proto3" json:"batch_payment,omitempty"`
	Error        *Error        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetBatchPaymentDetailsResponse) Reset() {
	*x = GetBatchPaymentDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchPaymentDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchPaymentDetailsResponse) ProtoMessage() {}

func (x *GetBatchPaymentDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchPaymentDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetBatchPaymentDetailsResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{42}
}

func (x *GetBatchPaymentDetailsResponse) GetBatchPayment() *BatchPayment {
	if x != nil {
		return x.BatchPayment
	}
	return nil
}

func (x *GetBatchPaymentDetailsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type BatchPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid is the unique identifier of the batch payment.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// name is the name of the batch payment.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// notes is the transaction notes for the batch payment.
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	// status is the status of the batch payment.
	Status BatchPayment_Status `protobuf:"varint,4,opt,name=status,proto3,enum=mpcvault.platform.v1.BatchPayment_Status" json:"status,omitempty"`
	// failed_reason is the reason why the batch payment failed, only set if status is STATUS_FAILED.
	FailedReason string `protobuf:"bytes,5,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
	// creation_timestamp is the timestamp when the batch payment was created.
	CreationTimestamp uint64 `protobuf:"varint,6,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// approval_signing_request is the signing request that approves the tokens to be sent if needed.
	ApprovalSigningRequest *SigningRequest `protobuf:"bytes,7,opt,name=approval_signing_request,json=approvalSigningRequest,proto3" json:"approval_signing_request,omitempty"`
	// send_signing_request is the signing request that sends the batch payment.
	SendSigningRequest *SigningRequest `protobuf:"bytes,8,opt,name=send_signing_request,json=sendSigningRequest,proto3" json:"send_signing_request,omitempty"`
	// Types that are assignable to Type:
	//
	//	*BatchPayment_EvmBatchSendNative
	//	*BatchPayment_EvmBatchSendErc20
	//	*BatchPayment_BtcBatchSendNative
	Type isBatchPayment_Type `protobuf_oneof:"type"`
}

func (x *BatchPayment) Reset() {
	*x = BatchPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPayment) ProtoMessage() {}

func (x *BatchPayment) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPayment.ProtoReflect.Descriptor instead.
func (*BatchPayment) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{43}
}

func (x *BatchPayment) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BatchPayment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchPayment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *BatchPayment) GetStatus() BatchPayment_Status {
	if x != nil {
		return x.Status
	}
	return BatchPayment_STATUS_UNSPECIFIED
}

func (x *BatchPayment) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *BatchPayment) GetCreationTimestamp() uint64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *BatchPayment) GetApprovalSigningRequest() *SigningRequest {
	if x != nil {
		return x.ApprovalSigningRequest
	}
	return nil
}

func (x *BatchPayment) GetSendSigningRequest() *SigningRequest {
	if x != nil {
		return x.SendSigningRequest
	}
	return nil
}

func (m *BatchPayment) GetType() isBatchPayment_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *BatchPayment) GetEvmBatchSendNative() *EVMBatchSendNative {
	if x, ok := x.GetType().(*BatchPayment_EvmBatchSendNative); ok {
		return x.EvmBatchSendNative
	}
	return nil
}

func (x *BatchPayment) GetEvmBatchSendErc20() *EVMBatchSendERC20 {
	if x, ok := x.GetType().(*BatchPayment_EvmBatchSendErc20); ok {
		return x.EvmBatchSendErc20
	}
	return nil
}

func (x *BatchPayment) GetBtcBatchSendNative() *BTCBatchSendNative {
	if x, ok := x.GetType().(*BatchPayment_BtcBatchSendNative); ok {
		return x.BtcBatchSendNative
	}
	return nil
}

type isBatchPayment_Type interface {
	isBatchPayment_Type()
}

type BatchPayment_EvmBatchSendNative struct {
	EvmBatchSendNative *EVMBatchSendNative `protobuf:"bytes,9,opt,name=evm_batch_send_native,json=evmBatchSendNative,proto3,oneof"`
}

type BatchPayment_EvmBatchSendErc20 struct {
	EvmBatchSendErc20 *EVMBatchSendERC20 `protobuf:"bytes,10,opt,name=evm_batch_send_erc20,json=evmBatchSendErc20,proto3,oneof"`
}

type BatchPayment_BtcBatchSendNative struct {
	BtcBatchSendNative *BTCBatchSendNative `protobuf:"bytes,11,opt,name=btc_batch_send_native,json=btcBatchSendNative,proto3,oneof"`
}

func (*BatchPayment_EvmBatchSendNative) isBatchPayment_Type() {}

func (*BatchPayment_EvmBatchSendErc20) isBatchPayment_Type() {}

func (*BatchPayment_BtcBatchSendNative) isBatchPayment_Type() {}

type SignatureContainer_SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Signature:
	//
	//	*SignatureContainer_SignResponse_EcdsaSignature
	//	*SignatureContainer_SignResponse_EddsaSignature
	Signature isSignatureContainer_SignResponse_Signature `protobuf_oneof:"signature"`
}

func (x *SignatureContainer_SignResponse) Reset() {
	*x = SignatureContainer_SignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureContainer_SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureContainer_SignResponse) ProtoMessage() {}

func (x *SignatureContainer_SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureContainer_SignResponse.ProtoReflect.Descriptor instead.
func (*SignatureContainer_SignResponse) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{5, 0}
}

func (m *SignatureContainer_SignResponse) GetSignature() isSignatureContainer_SignResponse_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *SignatureContainer_SignResponse) GetEcdsaSignature() *SignatureContainer_ECDSASignature {
	if x, ok := x.GetSignature().(*SignatureContainer_SignResponse_EcdsaSignature); ok {
		return x.EcdsaSignature
	}
	return nil
}

func (x *SignatureContainer_SignResponse) GetEddsaSignature() []byte {
	if x, ok := x.GetSignature().(*SignatureContainer_SignResponse_EddsaSignature); ok {
		return x.EddsaSignature
	}
	return nil
}

type isSignatureContainer_SignResponse_Signature interface {
	isSignatureContainer_SignResponse_Signature()
}

type SignatureContainer_SignResponse_EcdsaSignature struct {
	EcdsaSignature *SignatureContainer_ECDSASignature `protobuf:"bytes,1,opt,name=ecdsa_signature,json=ecdsaSignature,proto3,oneof"`
}

type SignatureContainer_SignResponse_EddsaSignature struct {
	// Ed25519 signatures are 64 bytes long, sig = R_bytes || s_bytes
	// R_bytes is the canonical 32-byte encoding of v, according to RFC 8032, Section 5.1.2
	EddsaSignature []byte `protobuf:"bytes,2,opt,name=eddsa_signature,json=eddsaSignature,proto3,oneof"`
}

func (*SignatureContainer_SignResponse_EcdsaSignature) isSignatureContainer_SignResponse_Signature() {
}

func (*SignatureContainer_SignResponse_EddsaSignature) isSignatureContainer_SignResponse_Signature() {
}

type SignatureContainer_ECDSASignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R string `protobuf:"bytes,1,opt,name=R,proto3" json:"R,omitempty"`
	S string `protobuf:"bytes,2,opt,name=S,proto3" json:"S,omitempty"`
	V string `protobuf:"bytes,3,opt,name=V,proto3" json:"V,omitempty"`
}

func (x *SignatureContainer_ECDSASignature) Reset() {
	*x = SignatureContainer_ECDSASignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureContainer_ECDSASignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureContainer_ECDSASignature) ProtoMessage() {}

func (x *SignatureContainer_ECDSASignature) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureContainer_ECDSASignature.ProtoReflect.Descriptor instead.
func (*SignatureContainer_ECDSASignature) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SignatureContainer_ECDSASignature) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *SignatureContainer_ECDSASignature) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *SignatureContainer_ECDSASignature) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

type AptosMessage_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Application *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	ChainId     *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Message     string                  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Nonce       string                  `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AptosMessage_Message) Reset() {
	*x = AptosMessage_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpcvault_platform_v1_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMessage_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMessage_Message) ProtoMessage() {}

func (x *AptosMessage_Message) ProtoReflect() protoreflect.Message {
	mi := &file_mpcvault_platform_v1_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMessage_Message.ProtoReflect.Descriptor instead.
func (*AptosMessage_Message) Descriptor() ([]byte, []int) {
	return file_mpcvault_platform_v1_api_proto_rawDescGZIP(), []int{7, 0}
}

func (x *AptosMessage_Message) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AptosMessage_Message) GetApplication() *wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *AptosMessage_Message) GetChainId() *wrapperspb.Int64Value {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *AptosMessage_Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AptosMessage_Message) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

var File_mpcvault_platform_v1_api_proto protoreflect.FileDescriptor

var file_mpcvault_platform_v1_api_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x21, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x70,
	0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x48, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x70,
	0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65, 0x64, 0x64, 0x73, 0x61, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x64, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3a,
	0x0a, 0x0e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x52, 0x12, 0x0c,
	0x0a, 0x01, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x53, 0x12, 0x0c, 0x0a, 0x01,
	0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x56, 0x22, 0xe0, 0x01, 0x0a, 0x0a, 0x45,
	0x56, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56,
	0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x22, 0xc1, 0x03,
	0x0a, 0x0c, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xe9, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x01, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x22,
	0x93, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x13,
	0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x70, 0x63, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x65, 0x63, 0x64, 0x73, 0x61, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x06, 0x45, 0x56, 0x4d, 0x47, 0x61, 0x73,
	0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x45,
	0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x35, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x47, 0x61, 0x73,
	0x52, 0x06, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x0c,
	0x45, 0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x52, 0x43, 0x32, 0x30, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x67, 0x61, 0x73,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x56, 0x4d, 0x47, 0x61, 0x73, 0x52, 0x06, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x45, 0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x47, 0x61, 0x73, 0x52,
	0x06, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x42, 0x54,
	0x43, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x54, 0x72, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x0d, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x52, 0x43, 0x31, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x65, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x65, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x47, 0x61,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x47, 0x61, 0x73, 0x52, 0x06, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0d,
	0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x47, 0x61, 0x73,
	0x52, 0x06, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x47, 0x61, 0x73, 0x52, 0x06, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x22, 0x72,
	0x0a, 0x06, 0x53, 0x75, 0x69, 0x47, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x47, 0x61, 0x73, 0x52, 0x06, 0x67,
	0x61, 0x73, 0x46, 0x65, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x69, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69,
	0x6e, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x47, 0x61, 0x73, 0x52, 0x06, 0x67, 0x61, 0x73,
	0x46, 0x65, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x53, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x4c, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x73, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x50,
	0x4c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x0d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x76, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x63, 0x32, 0x30,
	0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x76, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12,
	0x4d, 0x0a, 0x0f, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x54, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x62, 0x74, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x50,
	0x0a, 0x10, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72,
	0x63, 0x31, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x52, 0x43, 0x31, 0x30, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x63, 0x31, 0x30, 0x12,
	0x4d, 0x0a, 0x0f, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x63,
	0x32, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x63, 0x32, 0x30, 0x12, 0x53,
	0x0a, 0x11, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x70, 0x63, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x69, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x4d, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x56,
	0x0a, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x15, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x50, 0x4c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x56, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x76, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x61, 0x70,
	0x74, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x21, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x70,
	0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x31, 0x0a, 0x1b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x99, 0x10, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x0f,
	0x65, 0x76, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d,
	0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76,
	0x6d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x65,
	0x76, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x52, 0x43, 0x32, 0x30, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x6d, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x72, 0x63, 0x32, 0x30, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x76, 0x6d, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76, 0x6d, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x74, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x72, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x63, 0x31, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x52, 0x43, 0x31, 0x30, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x63, 0x31, 0x30, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x63, 0x32, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x72, 0x63, 0x32, 0x30, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e,
	0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x74, 0x6f, 0x73,
	0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x70,
	0x74, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x74, 0x6f,
	0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x70, 0x74,
	0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x70, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4d,
	0x0a, 0x0f, 0x73, 0x75, 0x69, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a,
	0x0d, 0x73, 0x75, 0x69, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x69, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a,
	0x15, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x6c,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x50,
	0x4c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x76, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c,
	0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x72, 0x61, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x67, 0x0a, 0x21, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x5d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x7d, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x90,
	0x01, 0x0a, 0x12, 0x45, 0x56, 0x4d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x45, 0x56, 0x4d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x52, 0x43, 0x32, 0x30, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x42, 0x54, 0x43,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x85, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x65, 0x76, 0x6d, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x65, 0x76, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x65, 0x76, 0x6d, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x52, 0x43, 0x32, 0x30, 0x48, 0x00, 0x52, 0x11,
	0x65, 0x76, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x63, 0x32,
	0x30, 0x12, 0x5d, 0x0a, 0x15, 0x62, 0x74, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x54, 0x43, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x74,
	0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9c, 0x06, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a,
	0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x70,
	0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x65, 0x76, 0x6d, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x76, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x65, 0x76, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x52, 0x43, 0x32, 0x30, 0x48, 0x00, 0x52, 0x11, 0x65,
	0x76, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x63, 0x32, 0x30,
	0x12, 0x5d, 0x0a, 0x15, 0x62, 0x74, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x54, 0x43, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x74, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x5d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xb5, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x54, 0x4f, 0x53, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x49, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x10, 0x06, 0x2a, 0x59,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x43, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x4b, 0x31, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x43, 0x5f,
	0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x2a, 0x86, 0x01, 0x0a, 0x11, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0x02, 0x32, 0x83, 0x07, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x50, 0x49, 0x12, 0x7d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x6d, 0x70, 0x63,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7d, 0x0a, 0x14, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x6d, 0x70, 0x63, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d,
	0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x89, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x35, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x33, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x70,
	0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x33, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x6f, 0x2e, 0x6d, 0x70, 0x63, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x70, 0x63, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpcvault_platform_v1_api_proto_rawDescOnce sync.Once
	file_mpcvault_platform_v1_api_proto_rawDescData = file_mpcvault_platform_v1_api_proto_rawDesc
)

func file_mpcvault_platform_v1_api_proto_rawDescGZIP() []byte {
	file_mpcvault_platform_v1_api_proto_rawDescOnce.Do(func() {
		file_mpcvault_platform_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpcvault_platform_v1_api_proto_rawDescData)
	})
	return file_mpcvault_platform_v1_api_proto_rawDescData
}

var file_mpcvault_platform_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mpcvault_platform_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_mpcvault_platform_v1_api_proto_goTypes = []interface{}{
	(NetworkType)(0),                          // 0: mpcvault.platform.v1.NetworkType
	(KeyType)(0),                              // 1: mpcvault.platform.v1.KeyType
	(ECDSAHashFunction)(0),                    // 2: mpcvault.platform.v1.ECDSAHashFunction
	(EVMMessage_Type)(0),                      // 3: mpcvault.platform.v1.EVMMessage.Type
	(AptosMessage_Type)(0),                    // 4: mpcvault.platform.v1.AptosMessage.Type
	(SolanaMessage_Type)(0),                   // 5: mpcvault.platform.v1.SolanaMessage.Type
	(SigningRequest_Status)(0),                // 6: mpcvault.platform.v1.SigningRequest.Status
	(BatchPayment_Status)(0),                  // 7: mpcvault.platform.v1.BatchPayment.Status
	(*CreateWalletRequest)(nil),               // 8: mpcvault.platform.v1.CreateWalletRequest
	(*Wallet)(nil),                            // 9: mpcvault.platform.v1.Wallet
	(*CreateWalletResponse)(nil),              // 10: mpcvault.platform.v1.CreateWalletResponse
	(*ExecuteSigningRequestsRequest)(nil),     // 11: mpcvault.platform.v1.ExecuteSigningRequestsRequest
	(*ExecuteSigningRequestsResponse)(nil),    // 12: mpcvault.platform.v1.ExecuteSigningRequestsResponse
	(*SignatureContainer)(nil),                // 13: mpcvault.platform.v1.SignatureContainer
	(*EVMMessage)(nil),                        // 14: mpcvault.platform.v1.EVMMessage
	(*AptosMessage)(nil),                      // 15: mpcvault.platform.v1.AptosMessage
	(*SolanaMessage)(nil),                     // 16: mpcvault.platform.v1.SolanaMessage
	(*RawMessage)(nil),                        // 17: mpcvault.platform.v1.RawMessage
	(*EVMGas)(nil),                            // 18: mpcvault.platform.v1.EVMGas
	(*EVMSendNative)(nil),                     // 19: mpcvault.platform.v1.EVMSendNative
	(*EVMSendERC20)(nil),                      // 20: mpcvault.platform.v1.EVMSendERC20
	(*EVMSendCustom)(nil),                     // 21: mpcvault.platform.v1.EVMSendCustom
	(*BTCSendNative)(nil),                     // 22: mpcvault.platform.v1.BTCSendNative
	(*TronSendNative)(nil),                    // 23: mpcvault.platform.v1.TronSendNative
	(*TronSendTRC10)(nil),                     // 24: mpcvault.platform.v1.TronSendTRC10
	(*TronSendTRC20)(nil),                     // 25: mpcvault.platform.v1.TronSendTRC20
	(*AptosGas)(nil),                          // 26: mpcvault.platform.v1.AptosGas
	(*AptosSendNative)(nil),                   // 27: mpcvault.platform.v1.AptosSendNative
	(*AptosSendCoin)(nil),                     // 28: mpcvault.platform.v1.AptosSendCoin
	(*AptosSendCustom)(nil),                   // 29: mpcvault.platform.v1.AptosSendCustom
	(*SuiGas)(nil),                            // 30: mpcvault.platform.v1.SuiGas
	(*SuiSendNative)(nil),                     // 31: mpcvault.platform.v1.SuiSendNative
	(*SuiSendCoin)(nil),                       // 32: mpcvault.platform.v1.SuiSendCoin
	(*SuiSendCustom)(nil),                     // 33: mpcvault.platform.v1.SuiSendCustom
	(*SolanaSendNative)(nil),                  // 34: mpcvault.platform.v1.SolanaSendNative
	(*SolanaSendSPLToken)(nil),                // 35: mpcvault.platform.v1.SolanaSendSPLToken
	(*CreateSigningRequestRequest)(nil),       // 36: mpcvault.platform.v1.CreateSigningRequestRequest
	(*CreateSigningRequestResponse)(nil),      // 37: mpcvault.platform.v1.CreateSigningRequestResponse
	(*RejectSigningRequestRequest)(nil),       // 38: mpcvault.platform.v1.RejectSigningRequestRequest
	(*RejectSigningRequestResponse)(nil),      // 39: mpcvault.platform.v1.RejectSigningRequestResponse
	(*GetSigningRequestDetailsRequest)(nil),   // 40: mpcvault.platform.v1.GetSigningRequestDetailsRequest
	(*GetSigningRequestDetailsResponse)(nil),  // 41: mpcvault.platform.v1.GetSigningRequestDetailsResponse
	(*SigningRequest)(nil),                    // 42: mpcvault.platform.v1.SigningRequest
	(*BatchPaymentRecipient)(nil),             // 43: mpcvault.platform.v1.BatchPaymentRecipient
	(*EVMBatchSendNative)(nil),                // 44: mpcvault.platform.v1.EVMBatchSendNative
	(*EVMBatchSendERC20)(nil),                 // 45: mpcvault.platform.v1.EVMBatchSendERC20
	(*BTCBatchSendNative)(nil),                // 46: mpcvault.platform.v1.BTCBatchSendNative
	(*CreateBatchPaymentRequest)(nil),         // 47: mpcvault.platform.v1.CreateBatchPaymentRequest
	(*CreateBatchPaymentResponse)(nil),        // 48: mpcvault.platform.v1.CreateBatchPaymentResponse
	(*GetBatchPaymentDetailsRequest)(nil),     // 49: mpcvault.platform.v1.GetBatchPaymentDetailsRequest
	(*GetBatchPaymentDetailsResponse)(nil),    // 50: mpcvault.platform.v1.GetBatchPaymentDetailsResponse
	(*BatchPayment)(nil),                      // 51: mpcvault.platform.v1.BatchPayment
	(*SignatureContainer_SignResponse)(nil),   // 52: mpcvault.platform.v1.SignatureContainer.SignResponse
	(*SignatureContainer_ECDSASignature)(nil), // 53: mpcvault.platform.v1.SignatureContainer.ECDSASignature
	(*AptosMessage_Message)(nil),              // 54: mpcvault.platform.v1.AptosMessage.Message
	(*Error)(nil),                             // 55: mpcvault.platform.v1.Error
	(*wrapperspb.StringValue)(nil),            // 56: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),             // 57: google.protobuf.Int64Value
}
var file_mpcvault_platform_v1_api_proto_depIdxs = []int32{
	0,   // 0: mpcvault.platform.v1.CreateWalletRequest.network_type:type_name -> mpcvault.platform.v1.NetworkType
	1,   // 1: mpcvault.platform.v1.Wallet.key_type:type_name -> mpcvault.platform.v1.KeyType
	0,   // 2: mpcvault.platform.v1.Wallet.network_type:type_name -> mpcvault.platform.v1.NetworkType
	9,   // 3: mpcvault.platform.v1.CreateWalletResponse.details:type_name -> mpcvault.platform.v1.Wallet
	55,  // 4: mpcvault.platform.v1.CreateWalletResponse.error:type_name -> mpcvault.platform.v1.Error
	55,  // 5: mpcvault.platform.v1.ExecuteSigningRequestsResponse.error:type_name -> mpcvault.platform.v1.Error
	13,  // 6: mpcvault.platform.v1.ExecuteSigningRequestsResponse.signatures:type_name -> mpcvault.platform.v1.SignatureContainer
	52,  // 7: mpcvault.platform.v1.SignatureContainer.signatures:type_name -> mpcvault.platform.v1.SignatureContainer.SignResponse
	3,   // 8: mpcvault.platform.v1.EVMMessage.type:type_name -> mpcvault.platform.v1.EVMMessage.Type
	4,   // 9: mpcvault.platform.v1.AptosMessage.type:type_name -> mpcvault.platform.v1.AptosMessage.Type
	54,  // 10: mpcvault.platform.v1.AptosMessage.content:type_name -> mpcvault.platform.v1.AptosMessage.Message
	5,   // 11: mpcvault.platform.v1.SolanaMessage.type:type_name -> mpcvault.platform.v1.SolanaMessage.Type
	2,   // 12: mpcvault.platform.v1.RawMessage.ecdsa_hash_function:type_name -> mpcvault.platform.v1.ECDSAHashFunction
	56,  // 13: mpcvault.platform.v1.EVMGas.max_fee:type_name -> google.protobuf.StringValue
	56,  // 14: mpcvault.platform.v1.EVMGas.max_priority_fee:type_name -> google.protobuf.StringValue
	56,  // 15: mpcvault.platform.v1.EVMGas.gas_limit:type_name -> google.protobuf.StringValue
	18,  // 16: mpcvault.platform.v1.EVMSendNative.gas_fee:type_name -> mpcvault.platform.v1.EVMGas
	57,  // 17: mpcvault.platform.v1.EVMSendNative.nonce:type_name -> google.protobuf.Int64Value
	18,  // 18: mpcvault.platform.v1.EVMSendERC20.gas_fee:type_name -> mpcvault.platform.v1.EVMGas
	57,  // 19: mpcvault.platform.v1.EVMSendERC20.nonce:type_name -> google.protobuf.Int64Value
	18,  // 20: mpcvault.platform.v1.EVMSendCustom.gas_fee:type_name -> mpcvault.platform.v1.EVMGas
	57,  // 21: mpcvault.platform.v1.EVMSendCustom.nonce:type_name -> google.protobuf.Int64Value
	56,  // 22: mpcvault.platform.v1.TronSendTRC20.fee_limit:type_name -> google.protobuf.StringValue
	56,  // 23: mpcvault.platform.v1.AptosGas.max_gas_amount:type_name -> google.protobuf.StringValue
	56,  // 24: mpcvault.platform.v1.AptosGas.gas_unit_price:type_name -> google.protobuf.StringValue
	26,  // 25: mpcvault.platform.v1.AptosSendNative.gas_fee:type_name -> mpcvault.platform.v1.AptosGas
	26,  // 26: mpcvault.platform.v1.AptosSendCoin.gas_fee:type_name -> mpcvault.platform.v1.AptosGas
	26,  // 27: mpcvault.platform.v1.AptosSendCustom.gas_fee:type_name -> mpcvault.platform.v1.AptosGas
	56,  // 28: mpcvault.platform.v1.SuiGas.budget:type_name -> google.protobuf.StringValue
	56,  // 29: mpcvault.platform.v1.SuiGas.price:type_name -> google.protobuf.StringValue
	30,  // 30: mpcvault.platform.v1.SuiSendNative.gas_fee:type_name -> mpcvault.platform.v1.SuiGas
	30,  // 31: mpcvault.platform.v1.SuiSendCoin.gas_fee:type_name -> mpcvault.platform.v1.SuiGas
	19,  // 32: mpcvault.platform.v1.CreateSigningRequestRequest.evm_send_native:type_name -> mpcvault.platform.v1.EVMSendNative
	20,  // 33: mpcvault.platform.v1.CreateSigningRequestRequest.evm_send_erc20:type_name -> mpcvault.platform.v1.EVMSendERC20
	21,  // 34: mpcvault.platform.v1.CreateSigningRequestRequest.evm_send_custom:type_name -> mpcvault.platform.v1.EVMSendCustom
	22,  // 35: mpcvault.platform.v1.CreateSigningRequestRequest.btc_send_native:type_name -> mpcvault.platform.v1.BTCSendNative
	23,  // 36: mpcvault.platform.v1.CreateSigningRequestRequest.tron_send_native:type_name -> mpcvault.platform.v1.TronSendNative
	24,  // 37: mpcvault.platform.v1.CreateSigningRequestRequest.tron_send_trc10:type_name -> mpcvault.platform.v1.TronSendTRC10
	25,  // 38: mpcvault.platform.v1.CreateSigningRequestRequest.tron_send_trc20:type_name -> mpcvault.platform.v1.TronSendTRC20
	27,  // 39: mpcvault.platform.v1.CreateSigningRequestRequest.aptos_send_native:type_name -> mpcvault.platform.v1.AptosSendNative
	28,  // 40: mpcvault.platform.v1.CreateSigningRequestRequest.aptos_send_coin:type_name -> mpcvault.platform.v1.AptosSendCoin
	29,  // 41: mpcvault.platform.v1.CreateSigningRequestRequest.aptos_send_custom:type_name -> mpcvault.platform.v1.AptosSendCustom
	31,  // 42: mpcvault.platform.v1.CreateSigningRequestRequest.sui_send_native:type_name -> mpcvault.platform.v1.SuiSendNative
	32,  // 43: mpcvault.platform.v1.CreateSigningRequestRequest.sui_send_coin:type_name -> mpcvault.platform.v1.SuiSendCoin
	33,  // 44: mpcvault.platform.v1.CreateSigningRequestRequest.sui_send_custom:type_name -> mpcvault.platform.v1.SuiSendCustom
	34,  // 45: mpcvault.platform.v1.CreateSigningRequestRequest.solana_send_native:type_name -> mpcvault.platform.v1.SolanaSendNative
	35,  // 46: mpcvault.platform.v1.CreateSigningRequestRequest.solana_send_spl_token:type_name -> mpcvault.platform.v1.SolanaSendSPLToken
	14,  // 47: mpcvault.platform.v1.CreateSigningRequestRequest.evm_message:type_name -> mpcvault.platform.v1.EVMMessage
	15,  // 48: mpcvault.platform.v1.CreateSigningRequestRequest.aptos_message:type_name -> mpcvault.platform.v1.AptosMessage
	16,  // 49: mpcvault.platform.v1.CreateSigningRequestRequest.solana_message:type_name -> mpcvault.platform.v1.SolanaMessage
	17,  // 50: mpcvault.platform.v1.CreateSigningRequestRequest.raw_message:type_name -> mpcvault.platform.v1.RawMessage
	56,  // 51: mpcvault.platform.v1.CreateSigningRequestRequest.notes:type_name -> google.protobuf.StringValue
	56,  // 52: mpcvault.platform.v1.CreateSigningRequestRequest.vault_uuid:type_name -> google.protobuf.StringValue
	56,  // 53: mpcvault.platform.v1.CreateSigningRequestRequest.callback_client_signer_public_key:type_name -> google.protobuf.StringValue
	42,  // 54: mpcvault.platform.v1.CreateSigningRequestResponse.signing_request:type_name -> mpcvault.platform.v1.SigningRequest
	55,  // 55: mpcvault.platform.v1.CreateSigningRequestResponse.error:type_name -> mpcvault.platform.v1.Error
	55,  // 56: mpcvault.platform.v1.RejectSigningRequestResponse.error:type_name -> mpcvault.platform.v1.Error
	42,  // 57: mpcvault.platform.v1.GetSigningRequestDetailsResponse.signing_request:type_name -> mpcvault.platform.v1.SigningRequest
	55,  // 58: mpcvault.platform.v1.GetSigningRequestDetailsResponse.error:type_name -> mpcvault.platform.v1.Error
	6,   // 59: mpcvault.platform.v1.SigningRequest.status:type_name -> mpcvault.platform.v1.SigningRequest.Status
	19,  // 60: mpcvault.platform.v1.SigningRequest.evm_send_native:type_name -> mpcvault.platform.v1.EVMSendNative
	20,  // 61: mpcvault.platform.v1.SigningRequest.evm_send_erc20:type_name -> mpcvault.platform.v1.EVMSendERC20
	21,  // 62: mpcvault.platform.v1.SigningRequest.evm_send_custom:type_name -> mpcvault.platform.v1.EVMSendCustom
	22,  // 63: mpcvault.platform.v1.SigningRequest.btc_send_native:type_name -> mpcvault.platform.v1.BTCSendNative
	23,  // 64: mpcvault.platform.v1.SigningRequest.tron_send_native:type_name -> mpcvault.platform.v1.TronSendNative
	24,  // 65: mpcvault.platform.v1.SigningRequest.tron_send_trc10:type_name -> mpcvault.platform.v1.TronSendTRC10
	25,  // 66: mpcvault.platform.v1.SigningRequest.tron_send_trc20:type_name -> mpcvault.platform.v1.TronSendTRC20
	27,  // 67: mpcvault.platform.v1.SigningRequest.aptos_send_native:type_name -> mpcvault.platform.v1.AptosSendNative
	28,  // 68: mpcvault.platform.v1.SigningRequest.aptos_send_coin:type_name -> mpcvault.platform.v1.AptosSendCoin
	29,  // 69: mpcvault.platform.v1.SigningRequest.aptos_send_custom:type_name -> mpcvault.platform.v1.AptosSendCustom
	31,  // 70: mpcvault.platform.v1.SigningRequest.sui_send_native:type_name -> mpcvault.platform.v1.SuiSendNative
	32,  // 71: mpcvault.platform.v1.SigningRequest.sui_send_coin:type_name -> mpcvault.platform.v1.SuiSendCoin
	33,  // 72: mpcvault.platform.v1.SigningRequest.sui_send_custom:type_name -> mpcvault.platform.v1.SuiSendCustom
	34,  // 73: mpcvault.platform.v1.SigningRequest.solana_send_native:type_name -> mpcvault.platform.v1.SolanaSendNative
	35,  // 74: mpcvault.platform.v1.SigningRequest.solana_send_spl_token:type_name -> mpcvault.platform.v1.SolanaSendSPLToken
	8,   // 75: mpcvault.platform.v1.SigningRequest.create_wallet:type_name -> mpcvault.platform.v1.CreateWalletRequest
	14,  // 76: mpcvault.platform.v1.SigningRequest.evm_message:type_name -> mpcvault.platform.v1.EVMMessage
	15,  // 77: mpcvault.platform.v1.SigningRequest.aptos_message:type_name -> mpcvault.platform.v1.AptosMessage
	16,  // 78: mpcvault.platform.v1.SigningRequest.solana_message:type_name -> mpcvault.platform.v1.SolanaMessage
	17,  // 79: mpcvault.platform.v1.SigningRequest.raw_message:type_name -> mpcvault.platform.v1.RawMessage
	56,  // 80: mpcvault.platform.v1.SigningRequest.vault_uuid:type_name -> google.protobuf.StringValue
	56,  // 81: mpcvault.platform.v1.SigningRequest.callback_client_signer_public_key:type_name -> google.protobuf.StringValue
	56,  // 82: mpcvault.platform.v1.BatchPaymentRecipient.notes:type_name -> google.protobuf.StringValue
	43,  // 83: mpcvault.platform.v1.EVMBatchSendNative.recipients:type_name -> mpcvault.platform.v1.BatchPaymentRecipient
	43,  // 84: mpcvault.platform.v1.EVMBatchSendERC20.recipients:type_name -> mpcvault.platform.v1.BatchPaymentRecipient
	43,  // 85: mpcvault.platform.v1.BTCBatchSendNative.recipients:type_name -> mpcvault.platform.v1.BatchPaymentRecipient
	56,  // 86: mpcvault.platform.v1.CreateBatchPaymentRequest.notes:type_name -> google.protobuf.StringValue
	44,  // 87: mpcvault.platform.v1.CreateBatchPaymentRequest.evm_batch_send_native:type_name -> mpcvault.platform.v1.EVMBatchSendNative
	45,  // 88: mpcvault.platform.v1.CreateBatchPaymentRequest.evm_batch_send_erc20:type_name -> mpcvault.platform.v1.EVMBatchSendERC20
	46,  // 89: mpcvault.platform.v1.CreateBatchPaymentRequest.btc_batch_send_native:type_name -> mpcvault.platform.v1.BTCBatchSendNative
	51,  // 90: mpcvault.platform.v1.CreateBatchPaymentResponse.batch_payment:type_name -> mpcvault.platform.v1.BatchPayment
	55,  // 91: mpcvault.platform.v1.CreateBatchPaymentResponse.error:type_name -> mpcvault.platform.v1.Error
	51,  // 92: mpcvault.platform.v1.GetBatchPaymentDetailsResponse.batch_payment:type_name -> mpcvault.platform.v1.BatchPayment
	55,  // 93: mpcvault.platform.v1.GetBatchPaymentDetailsResponse.error:type_name -> mpcvault.platform.v1.Error
	7,   // 94: mpcvault.platform.v1.BatchPayment.status:type_name -> mpcvault.platform.v1.BatchPayment.Status
	42,  // 95: mpcvault.platform.v1.BatchPayment.approval_signing_request:type_name -> mpcvault.platform.v1.SigningRequest
	42,  // 96: mpcvault.platform.v1.BatchPayment.send_signing_request:type_name -> mpcvault.platform.v1.SigningRequest
	44,  // 97: mpcvault.platform.v1.BatchPayment.evm_batch_send_native:type_name -> mpcvault.platform.v1.EVMBatchSendNative
	45,  // 98: mpcvault.platform.v1.BatchPayment.evm_batch_send_erc20:type_name -> mpcvault.platform.v1.EVMBatchSendERC20
	46,  // 99: mpcvault.platform.v1.BatchPayment.btc_batch_send_native:type_name -> mpcvault.platform.v1.BTCBatchSendNative
	53,  // 100: mpcvault.platform.v1.SignatureContainer.SignResponse.ecdsa_signature:type_name -> mpcvault.platform.v1.SignatureContainer.ECDSASignature
	56,  // 101: mpcvault.platform.v1.AptosMessage.Message.address:type_name -> google.protobuf.StringValue
	56,  // 102: mpcvault.platform.v1.AptosMessage.Message.application:type_name -> google.protobuf.StringValue
	57,  // 103: mpcvault.platform.v1.AptosMessage.Message.chain_id:type_name -> google.protobuf.Int64Value
	36,  // 104: mpcvault.platform.v1.PlatformAPI.CreateSigningRequest:input_type -> mpcvault.platform.v1.CreateSigningRequestRequest
	38,  // 105: mpcvault.platform.v1.PlatformAPI.RejectSigningRequest:input_type -> mpcvault.platform.v1.RejectSigningRequestRequest
	40,  // 106: mpcvault.platform.v1.PlatformAPI.GetSigningRequestDetails:input_type -> mpcvault.platform.v1.GetSigningRequestDetailsRequest
	47,  // 107: mpcvault.platform.v1.PlatformAPI.CreateBatchPayment:input_type -> mpcvault.platform.v1.CreateBatchPaymentRequest
	49,  // 108: mpcvault.platform.v1.PlatformAPI.GetBatchPaymentDetails:input_type -> mpcvault.platform.v1.GetBatchPaymentDetailsRequest
	8,   // 109: mpcvault.platform.v1.PlatformAPI.CreateWallet:input_type -> mpcvault.platform.v1.CreateWalletRequest
	11,  // 110: mpcvault.platform.v1.PlatformAPI.ExecuteSigningRequests:input_type -> mpcvault.platform.v1.ExecuteSigningRequestsRequest
	37,  // 111: mpcvault.platform.v1.PlatformAPI.CreateSigningRequest:output_type -> mpcvault.platform.v1.CreateSigningRequestResponse
	39,  // 112: mpcvault.platform.v1.PlatformAPI.RejectSigningRequest:output_type -> mpcvault.platform.v1.RejectSigningRequestResponse
	41,  // 113: mpcvault.platform.v1.PlatformAPI.GetSigningRequestDetails:output_type -> mpcvault.platform.v1.GetSigningRequestDetailsResponse
	48,  // 114: mpcvault.platform.v1.PlatformAPI.CreateBatchPayment:output_type -> mpcvault.platform.v1.CreateBatchPaymentResponse
	50,  // 115: mpcvault.platform.v1.PlatformAPI.GetBatchPaymentDetails:output_type -> mpcvault.platform.v1.GetBatchPaymentDetailsResponse
	10,  // 116: mpcvault.platform.v1.PlatformAPI.CreateWallet:output_type -> mpcvault.platform.v1.CreateWalletResponse
	12,  // 117: mpcvault.platform.v1.PlatformAPI.ExecuteSigningRequests:output_type -> mpcvault.platform.v1.ExecuteSigningRequestsResponse
	111, // [111:118] is the sub-list for method output_type
	104, // [104:111] is the sub-list for method input_type
	104, // [104:104] is the sub-list for extension type_name
	104, // [104:104] is the sub-list for extension extendee
	0,   // [0:104] is the sub-list for field type_name
}

func init() { file_mpcvault_platform_v1_api_proto_init() }
func file_mpcvault_platform_v1_api_proto_init() {
	if File_mpcvault_platform_v1_api_proto != nil {
		return
	}
	file_mpcvault_platform_v1_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mpcvault_platform_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSigningRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSigningRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMGas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMSendERC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMSendCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TronSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TronSendTRC10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TronSendTRC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosGas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosSendCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosSendCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiGas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiSendCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiSendCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSendSPLToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSigningRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSigningRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectSigningRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectSigningRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSigningRequestDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSigningRequestDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPaymentRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMBatchSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMBatchSendERC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCBatchSendNative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchPaymentDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchPaymentDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureContainer_SignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureContainer_ECDSASignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpcvault_platform_v1_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMessage_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mpcvault_platform_v1_api_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*CreateSigningRequestRequest_EvmSendNative)(nil),
		(*CreateSigningRequestRequest_EvmSendErc20)(nil),
		(*CreateSigningRequestRequest_EvmSendCustom)(nil),
		(*CreateSigningRequestRequest_BtcSendNative)(nil),
		(*CreateSigningRequestRequest_TronSendNative)(nil),
		(*CreateSigningRequestRequest_TronSendTrc10)(nil),
		(*CreateSigningRequestRequest_TronSendTrc20)(nil),
		(*CreateSigningRequestRequest_AptosSendNative)(nil),
		(*CreateSigningRequestRequest_AptosSendCoin)(nil),
		(*CreateSigningRequestRequest_AptosSendCustom)(nil),
		(*CreateSigningRequestRequest_SuiSendNative)(nil),
		(*CreateSigningRequestRequest_SuiSendCoin)(nil),
		(*CreateSigningRequestRequest_SuiSendCustom)(nil),
		(*CreateSigningRequestRequest_SolanaSendNative)(nil),
		(*CreateSigningRequestRequest_SolanaSendSplToken)(nil),
		(*CreateSigningRequestRequest_EvmMessage)(nil),
		(*CreateSigningRequestRequest_AptosMessage)(nil),
		(*CreateSigningRequestRequest_SolanaMessage)(nil),
		(*CreateSigningRequestRequest_RawMessage)(nil),
	}
	file_mpcvault_platform_v1_api_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*SigningRequest_EvmSendNative)(nil),
		(*SigningRequest_EvmSendErc20)(nil),
		(*SigningRequest_EvmSendCustom)(nil),
		(*SigningRequest_BtcSendNative)(nil),
		(*SigningRequest_TronSendNative)(nil),
		(*SigningRequest_TronSendTrc10)(nil),
		(*SigningRequest_TronSendTrc20)(nil),
		(*SigningRequest_AptosSendNative)(nil),
		(*SigningRequest_AptosSendCoin)(nil),
		(*SigningRequest_AptosSendCustom)(nil),
		(*SigningRequest_SuiSendNative)(nil),
		(*SigningRequest_SuiSendCoin)(nil),
		(*SigningRequest_SuiSendCustom)(nil),
		(*SigningRequest_SolanaSendNative)(nil),
		(*SigningRequest_SolanaSendSplToken)(nil),
		(*SigningRequest_CreateWallet)(nil),
		(*SigningRequest_EvmMessage)(nil),
		(*SigningRequest_AptosMessage)(nil),
		(*SigningRequest_SolanaMessage)(nil),
		(*SigningRequest_RawMessage)(nil),
	}
	file_mpcvault_platform_v1_api_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*CreateBatchPaymentRequest_EvmBatchSendNative)(nil),
		(*CreateBatchPaymentRequest_EvmBatchSendErc20)(nil),
		(*CreateBatchPaymentRequest_BtcBatchSendNative)(nil),
	}
	file_mpcvault_platform_v1_api_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*BatchPayment_EvmBatchSendNative)(nil),
		(*BatchPayment_EvmBatchSendErc20)(nil),
		(*BatchPayment_BtcBatchSendNative)(nil),
	}
	file_mpcvault_platform_v1_api_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*SignatureContainer_SignResponse_EcdsaSignature)(nil),
		(*SignatureContainer_SignResponse_EddsaSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpcvault_platform_v1_api_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mpcvault_platform_v1_api_proto_goTypes,
		DependencyIndexes: file_mpcvault_platform_v1_api_proto_depIdxs,
		EnumInfos:         file_mpcvault_platform_v1_api_proto_enumTypes,
		MessageInfos:      file_mpcvault_platform_v1_api_proto_msgTypes,
	}.Build()
	File_mpcvault_platform_v1_api_proto = out.File
	file_mpcvault_platform_v1_api_proto_rawDesc = nil
	file_mpcvault_platform_v1_api_proto_goTypes = nil
	file_mpcvault_platform_v1_api_proto_depIdxs = nil
}
